
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080042a0  080042a0  000052a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004314  08004314  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004314  08004314  00005314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800431c  0800431c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800431c  0800431c  0000531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004320  08004320  00005320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004324  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000068  0800438c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  0800438c  000062cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d33e  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2d  00000000  00000000  000133d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00015308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000994  00000000  00000000  00015f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229cf  00000000  00000000  000168e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001028e  00000000  00000000  000392b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce5f8  00000000  00000000  00049541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117b39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae8  00000000  00000000  00117b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0011b664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004288 	.word	0x08004288

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004288 	.word	0x08004288

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d013      	beq.n	80005e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00b      	beq.n	80005e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c8:	e000      	b.n	80005cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f6:	f000 fbf5 	bl	8000de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f837 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f931 	bl	8000864 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 f905 	bl	8000810 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000606:	f000 f89f 	bl	8000748 <MX_I2C1_Init>
  MX_SPI2_Init();
 800060a:	f000 f8cb 	bl	80007a4 <MX_SPI2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)

  {

	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 800060e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000612:	4812      	ldr	r0, [pc, #72]	@ (800065c <main+0x6c>)
 8000614:	f000 fef6 	bl	8001404 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d014      	beq.n	8000648 <main+0x58>
	  {

		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin , GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2120      	movs	r1, #32
 8000622:	480f      	ldr	r0, [pc, #60]	@ (8000660 <main+0x70>)
 8000624:	f000 ff06 	bl	8001434 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8000628:	200a      	movs	r0, #10
 800062a:	f000 fc4d 	bl	8000ec8 <HAL_Delay>
		  x_acc = mpu9250read();
 800062e:	f000 f9a9 	bl	8000984 <mpu9250read>
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
		  HAL_Delay(10);
 8000636:	200a      	movs	r0, #10
 8000638:	f000 fc46 	bl	8000ec8 <HAL_Delay>
		  printf("X-axis acceleration: %d\n", x_acc);
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4619      	mov	r1, r3
 8000640:	4808      	ldr	r0, [pc, #32]	@ (8000664 <main+0x74>)
 8000642:	f002 ff55 	bl	80034f0 <iprintf>
 8000646:	e7e2      	b.n	800060e <main+0x1e>



	  }
	  else {
		  HAL_GPIO_WritePin(LD2_GPIO_Port,  LD2_Pin , GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2120      	movs	r1, #32
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <main+0x70>)
 800064e:	f000 fef1 	bl	8001434 <HAL_GPIO_WritePin>
		  printf("Hello World\n");
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <main+0x78>)
 8000654:	f002 ffb4 	bl	80035c0 <puts>
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000658:	e7d9      	b.n	800060e <main+0x1e>
 800065a:	bf00      	nop
 800065c:	40020800 	.word	0x40020800
 8000660:	40020000 	.word	0x40020000
 8000664:	080042a0 	.word	0x080042a0
 8000668:	080042bc 	.word	0x080042bc

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	@ 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2234      	movs	r2, #52	@ 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 f880 	bl	8003780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <SystemClock_Config+0xd4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a29      	ldr	r2, [pc, #164]	@ (8000740 <SystemClock_Config+0xd4>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <SystemClock_Config+0xd4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <SystemClock_Config+0xd8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b8:	4a22      	ldr	r2, [pc, #136]	@ (8000744 <SystemClock_Config+0xd8>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <SystemClock_Config+0xd8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e0:	2310      	movs	r3, #16
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ea:	2304      	movs	r3, #4
 80006ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 f84a 	bl	8002794 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000706:	f000 f937 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2102      	movs	r1, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fcea 	bl	8002100 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000732:	f000 f921 	bl	8000978 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	@ 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	@ (800079c <MX_I2C1_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000754:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x58>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000766:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800076a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000786:	f000 fe6f 	bl	8001468 <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 f8f2 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000084 	.word	0x20000084
 800079c:	40005400 	.word	0x40005400
 80007a0:	000186a0 	.word	0x000186a0

080007a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007a8:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007aa:	4a18      	ldr	r2, [pc, #96]	@ (800080c <MX_SPI2_Init+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007f0:	220a      	movs	r2, #10
 80007f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007f6:	f002 fa6b 	bl	8002cd0 <HAL_SPI_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000800:	f000 f8ba 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000d8 	.word	0x200000d8
 800080c:	40003800 	.word	0x40003800

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <MX_USART2_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000848:	f002 facb 	bl	8002de2 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f891 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000130 	.word	0x20000130
 8000860:	40004400 	.word	0x40004400

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b2d      	ldr	r3, [pc, #180]	@ (8000934 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a2c      	ldr	r2, [pc, #176]	@ (8000934 <MX_GPIO_Init+0xd0>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b2a      	ldr	r3, [pc, #168]	@ (8000934 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a25      	ldr	r2, [pc, #148]	@ (8000934 <MX_GPIO_Init+0xd0>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b23      	ldr	r3, [pc, #140]	@ (8000934 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000934 <MX_GPIO_Init+0xd0>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a17      	ldr	r2, [pc, #92]	@ (8000934 <MX_GPIO_Init+0xd0>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2120      	movs	r1, #32
 80008ee:	4812      	ldr	r0, [pc, #72]	@ (8000938 <MX_GPIO_Init+0xd4>)
 80008f0:	f000 fda0 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	480c      	ldr	r0, [pc, #48]	@ (800093c <MX_GPIO_Init+0xd8>)
 800090c:	f000 fbe6 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000910:	2320      	movs	r3, #32
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_GPIO_Init+0xd4>)
 8000928:	f000 fbd8 	bl	80010dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	@ 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000
 800093c:	40020800 	.word	0x40020800

08000940 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e009      	b.n	8000966 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	60ba      	str	r2, [r7, #8]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fe20 	bl	80005a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	429a      	cmp	r2, r3
 800096c:	dbf1      	blt.n	8000952 <_write+0x12>
  }
  return len;
 800096e:	687b      	ldr	r3, [r7, #4]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <mpu9250read>:
	  }

}

int16_t mpu9250read()
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af04      	add	r7, sp, #16
	//+1 because read
	uint8_t data[6]; //2 bytes of data, no need to use & because use of array
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS <<1) + 1, REG_DATA, 1, data, 2, 100);
 800098a:	2364      	movs	r3, #100	@ 0x64
 800098c:	9302      	str	r3, [sp, #8]
 800098e:	2302      	movs	r3, #2
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	463b      	mov	r3, r7
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2301      	movs	r3, #1
 8000998:	223b      	movs	r2, #59	@ 0x3b
 800099a:	21d1      	movs	r1, #209	@ 0xd1
 800099c:	4807      	ldr	r0, [pc, #28]	@ (80009bc <mpu9250read+0x38>)
 800099e:	f000 fea7 	bl	80016f0 <HAL_I2C_Mem_Read>
	int16_t x_acc = ((int16_t)data[0] <<8) | data[1];
 80009a2:	783b      	ldrb	r3, [r7, #0]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	787b      	ldrb	r3, [r7, #1]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	80fb      	strh	r3, [r7, #6]
	//x_acc = (x_acc/8192)*9.80665;

	return x_acc;
 80009b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]


}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000084 	.word	0x20000084

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fe:	2007      	movs	r0, #7
 8000a00:	f000 fb38 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	@ (8000a94 <HAL_I2C_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12c      	bne.n	8000a8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a54:	2312      	movs	r3, #18
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a60:	2304      	movs	r3, #4
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <HAL_I2C_MspInit+0x8c>)
 8000a6c:	f000 fb36 	bl	80010dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	@ 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40005400 	.word	0x40005400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a28      	ldr	r2, [pc, #160]	@ (8000b60 <HAL_SPI_MspInit+0xc0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d14a      	bne.n	8000b58 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b27      	ldr	r3, [pc, #156]	@ (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a26      	ldr	r2, [pc, #152]	@ (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b24      	ldr	r3, [pc, #144]	@ (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a18      	ldr	r2, [pc, #96]	@ (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <HAL_SPI_MspInit+0xc4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b16:	2302      	movs	r3, #2
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480d      	ldr	r0, [pc, #52]	@ (8000b68 <HAL_SPI_MspInit+0xc8>)
 8000b32:	f000 fad3 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b48:	2305      	movs	r3, #5
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <HAL_SPI_MspInit+0xcc>)
 8000b54:	f000 fac2 	bl	80010dc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	@ 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40003800 	.word	0x40003800
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020400 	.word	0x40020400

08000b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	@ 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a19      	ldr	r2, [pc, #100]	@ (8000bf4 <HAL_UART_MspInit+0x84>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d12b      	bne.n	8000bea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <HAL_UART_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	4a17      	ldr	r2, [pc, #92]	@ (8000bf8 <HAL_UART_MspInit+0x88>)
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <HAL_UART_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <HAL_UART_MspInit+0x88>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a10      	ldr	r2, [pc, #64]	@ (8000bf8 <HAL_UART_MspInit+0x88>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_UART_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <HAL_UART_MspInit+0x8c>)
 8000be6:	f000 fa79 	bl	80010dc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	@ 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 f917 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	60f8      	str	r0, [r7, #12]
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	e00a      	b.n	8000c86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c70:	f3af 8000 	nop.w
 8000c74:	4601      	mov	r1, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	60ba      	str	r2, [r7, #8]
 8000c7c:	b2ca      	uxtb	r2, r1
 8000c7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3301      	adds	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	dbf0      	blt.n	8000c70 <_read+0x12>
  }

  return len;
 8000c8e:	687b      	ldr	r3, [r7, #4]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc0:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <_isatty>:

int _isatty(int file)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cd8:	2301      	movs	r3, #1
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b085      	sub	sp, #20
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d08:	4a14      	ldr	r2, [pc, #80]	@ (8000d5c <_sbrk+0x5c>)
 8000d0a:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <_sbrk+0x60>)
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <_sbrk+0x64>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	@ (8000d68 <_sbrk+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d207      	bcs.n	8000d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d30:	f002 fd74 	bl	800381c <__errno>
 8000d34:	4603      	mov	r3, r0
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	e009      	b.n	8000d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d46:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <_sbrk+0x64>)
 8000d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20020000 	.word	0x20020000
 8000d60:	00000400 	.word	0x00000400
 8000d64:	20000178 	.word	0x20000178
 8000d68:	200002d0 	.word	0x200002d0

08000d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	@ (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d94:	f7ff ffea 	bl	8000d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	@ (8000dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f002 fd33 	bl	8003828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc2:	f7ff fc15 	bl	80005f0 <main>
  bx  lr    
 8000dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dd4:	08004324 	.word	0x08004324
  ldr r2, =_sbss
 8000dd8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ddc:	200002cc 	.word	0x200002cc

08000de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC_IRQHandler>
	...

08000de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0d      	ldr	r2, [pc, #52]	@ (8000e24 <HAL_Init+0x40>)
 8000dee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <HAL_Init+0x40>)
 8000dfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	@ (8000e24 <HAL_Init+0x40>)
 8000e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f931 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f808 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff fdd2 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023c00 	.word	0x40023c00

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f93b 	bl	80010c2 <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 f911 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	@ (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_IncTick+0x20>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_IncTick+0x24>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <HAL_IncTick+0x24>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	2000017c 	.word	0x2000017c

08000eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	@ (8000ec4 <HAL_GetTick+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	2000017c 	.word	0x2000017c

08000ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed0:	f7ff ffee 	bl	8000eb0 <HAL_GetTick>
 8000ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d005      	beq.n	8000eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <HAL_Delay+0x44>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eee:	bf00      	nop
 8000ef0:	f7ff ffde 	bl	8000eb0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d8f7      	bhi.n	8000ef0 <HAL_Delay+0x28>
  {
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008

08000f10 <__NVIC_SetPriorityGrouping>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_SetPriority>:
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	@ (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff47 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff5c 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffb0 	bl	8001030 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	@ 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	e165      	b.n	80013c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f8:	2201      	movs	r2, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8154 	bne.w	80013be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d005      	beq.n	800112e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	2b02      	cmp	r3, #2
 800112c:	d130      	bne.n	8001190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 0201 	and.w	r2, r3, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b03      	cmp	r3, #3
 800119a:	d017      	beq.n	80011cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d123      	bne.n	8001220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	69b9      	ldr	r1, [r7, #24]
 800121c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0203 	and.w	r2, r3, #3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80ae 	beq.w	80013be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b5d      	ldr	r3, [pc, #372]	@ (80013dc <HAL_GPIO_Init+0x300>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	4a5c      	ldr	r2, [pc, #368]	@ (80013dc <HAL_GPIO_Init+0x300>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001270:	6453      	str	r3, [r2, #68]	@ 0x44
 8001272:	4b5a      	ldr	r3, [pc, #360]	@ (80013dc <HAL_GPIO_Init+0x300>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127e:	4a58      	ldr	r2, [pc, #352]	@ (80013e0 <HAL_GPIO_Init+0x304>)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4f      	ldr	r2, [pc, #316]	@ (80013e4 <HAL_GPIO_Init+0x308>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d025      	beq.n	80012f6 <HAL_GPIO_Init+0x21a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4e      	ldr	r2, [pc, #312]	@ (80013e8 <HAL_GPIO_Init+0x30c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d01f      	beq.n	80012f2 <HAL_GPIO_Init+0x216>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4d      	ldr	r2, [pc, #308]	@ (80013ec <HAL_GPIO_Init+0x310>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <HAL_GPIO_Init+0x212>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4c      	ldr	r2, [pc, #304]	@ (80013f0 <HAL_GPIO_Init+0x314>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x20e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4b      	ldr	r2, [pc, #300]	@ (80013f4 <HAL_GPIO_Init+0x318>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x20a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4a      	ldr	r2, [pc, #296]	@ (80013f8 <HAL_GPIO_Init+0x31c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x206>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a49      	ldr	r2, [pc, #292]	@ (80013fc <HAL_GPIO_Init+0x320>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x202>
 80012da:	2306      	movs	r3, #6
 80012dc:	e00c      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012de:	2307      	movs	r3, #7
 80012e0:	e00a      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e008      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012f6:	2300      	movs	r3, #0
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001308:	4935      	ldr	r1, [pc, #212]	@ (80013e0 <HAL_GPIO_Init+0x304>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001316:	4b3a      	ldr	r3, [pc, #232]	@ (8001400 <HAL_GPIO_Init+0x324>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133a:	4a31      	ldr	r2, [pc, #196]	@ (8001400 <HAL_GPIO_Init+0x324>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001340:	4b2f      	ldr	r3, [pc, #188]	@ (8001400 <HAL_GPIO_Init+0x324>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001364:	4a26      	ldr	r2, [pc, #152]	@ (8001400 <HAL_GPIO_Init+0x324>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136a:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <HAL_GPIO_Init+0x324>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800138e:	4a1c      	ldr	r2, [pc, #112]	@ (8001400 <HAL_GPIO_Init+0x324>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <HAL_GPIO_Init+0x324>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b8:	4a11      	ldr	r2, [pc, #68]	@ (8001400 <HAL_GPIO_Init+0x324>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	f67f ae96 	bls.w	80010f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40021400 	.word	0x40021400
 80013fc:	40021800 	.word	0x40021800
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e001      	b.n	8001426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001450:	e003      	b.n	800145a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e12b      	b.n	80016d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fabe 	bl	8000a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2224      	movs	r2, #36	@ 0x24
 8001498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014cc:	f000 ff0a 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 80014d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4a81      	ldr	r2, [pc, #516]	@ (80016dc <HAL_I2C_Init+0x274>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d807      	bhi.n	80014ec <HAL_I2C_Init+0x84>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4a80      	ldr	r2, [pc, #512]	@ (80016e0 <HAL_I2C_Init+0x278>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	bf94      	ite	ls
 80014e4:	2301      	movls	r3, #1
 80014e6:	2300      	movhi	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	e006      	b.n	80014fa <HAL_I2C_Init+0x92>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4a7d      	ldr	r2, [pc, #500]	@ (80016e4 <HAL_I2C_Init+0x27c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	bf94      	ite	ls
 80014f4:	2301      	movls	r3, #1
 80014f6:	2300      	movhi	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0e7      	b.n	80016d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4a78      	ldr	r2, [pc, #480]	@ (80016e8 <HAL_I2C_Init+0x280>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0c9b      	lsrs	r3, r3, #18
 800150c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	430a      	orrs	r2, r1
 8001520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4a6a      	ldr	r2, [pc, #424]	@ (80016dc <HAL_I2C_Init+0x274>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d802      	bhi.n	800153c <HAL_I2C_Init+0xd4>
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3301      	adds	r3, #1
 800153a:	e009      	b.n	8001550 <HAL_I2C_Init+0xe8>
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	4a69      	ldr	r2, [pc, #420]	@ (80016ec <HAL_I2C_Init+0x284>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	3301      	adds	r3, #1
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	430b      	orrs	r3, r1
 8001556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001562:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	495c      	ldr	r1, [pc, #368]	@ (80016dc <HAL_I2C_Init+0x274>)
 800156c:	428b      	cmp	r3, r1
 800156e:	d819      	bhi.n	80015a4 <HAL_I2C_Init+0x13c>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1e59      	subs	r1, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fbb1 f3f3 	udiv	r3, r1, r3
 800157e:	1c59      	adds	r1, r3, #1
 8001580:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001584:	400b      	ands	r3, r1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00a      	beq.n	80015a0 <HAL_I2C_Init+0x138>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fbb1 f3f3 	udiv	r3, r1, r3
 8001598:	3301      	adds	r3, #1
 800159a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159e:	e051      	b.n	8001644 <HAL_I2C_Init+0x1dc>
 80015a0:	2304      	movs	r3, #4
 80015a2:	e04f      	b.n	8001644 <HAL_I2C_Init+0x1dc>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d111      	bne.n	80015d0 <HAL_I2C_Init+0x168>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1e58      	subs	r0, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	440b      	add	r3, r1
 80015ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80015be:	3301      	adds	r3, #1
 80015c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf0c      	ite	eq
 80015c8:	2301      	moveq	r3, #1
 80015ca:	2300      	movne	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	e012      	b.n	80015f6 <HAL_I2C_Init+0x18e>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1e58      	subs	r0, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	0099      	lsls	r1, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf0c      	ite	eq
 80015f0:	2301      	moveq	r3, #1
 80015f2:	2300      	movne	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_I2C_Init+0x196>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e022      	b.n	8001644 <HAL_I2C_Init+0x1dc>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10e      	bne.n	8001624 <HAL_I2C_Init+0x1bc>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1e58      	subs	r0, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6859      	ldr	r1, [r3, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	440b      	add	r3, r1
 8001614:	fbb0 f3f3 	udiv	r3, r0, r3
 8001618:	3301      	adds	r3, #1
 800161a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001622:	e00f      	b.n	8001644 <HAL_I2C_Init+0x1dc>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	1e58      	subs	r0, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	0099      	lsls	r1, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	fbb0 f3f3 	udiv	r3, r0, r3
 800163a:	3301      	adds	r3, #1
 800163c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001640:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	6809      	ldr	r1, [r1, #0]
 8001648:	4313      	orrs	r3, r2
 800164a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69da      	ldr	r2, [r3, #28]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001672:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6911      	ldr	r1, [r2, #16]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68d2      	ldr	r2, [r2, #12]
 800167e:	4311      	orrs	r1, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	430b      	orrs	r3, r1
 8001686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2220      	movs	r2, #32
 80016be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	000186a0 	.word	0x000186a0
 80016e0:	001e847f 	.word	0x001e847f
 80016e4:	003d08ff 	.word	0x003d08ff
 80016e8:	431bde83 	.word	0x431bde83
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08c      	sub	sp, #48	@ 0x30
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	817b      	strh	r3, [r7, #10]
 8001702:	460b      	mov	r3, r1
 8001704:	813b      	strh	r3, [r7, #8]
 8001706:	4613      	mov	r3, r2
 8001708:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800170a:	f7ff fbd1 	bl	8000eb0 <HAL_GetTick>
 800170e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b20      	cmp	r3, #32
 800171a:	f040 8214 	bne.w	8001b46 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2319      	movs	r3, #25
 8001724:	2201      	movs	r2, #1
 8001726:	497b      	ldr	r1, [pc, #492]	@ (8001914 <HAL_I2C_Mem_Read+0x224>)
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 fafb 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001734:	2302      	movs	r3, #2
 8001736:	e207      	b.n	8001b48 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_I2C_Mem_Read+0x56>
 8001742:	2302      	movs	r3, #2
 8001744:	e200      	b.n	8001b48 <HAL_I2C_Mem_Read+0x458>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b01      	cmp	r3, #1
 800175a:	d007      	beq.n	800176c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800177a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2222      	movs	r2, #34	@ 0x22
 8001780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2240      	movs	r2, #64	@ 0x40
 8001788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800179c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001918 <HAL_I2C_Mem_Read+0x228>)
 80017ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017ae:	88f8      	ldrh	r0, [r7, #6]
 80017b0:	893a      	ldrh	r2, [r7, #8]
 80017b2:	8979      	ldrh	r1, [r7, #10]
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4603      	mov	r3, r0
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 f9c8 	bl	8001b54 <I2C_RequestMemoryRead>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e1bc      	b.n	8001b48 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d113      	bne.n	80017fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	623b      	str	r3, [r7, #32]
 80017ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e190      	b.n	8001b20 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001802:	2b01      	cmp	r3, #1
 8001804:	d11b      	bne.n	800183e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	e170      	b.n	8001b20 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001842:	2b02      	cmp	r3, #2
 8001844:	d11b      	bne.n	800187e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001854:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	e150      	b.n	8001b20 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001894:	e144      	b.n	8001b20 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189a:	2b03      	cmp	r3, #3
 800189c:	f200 80f1 	bhi.w	8001a82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d123      	bne.n	80018f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 fb9b 	bl	8001fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e145      	b.n	8001b48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d8:	3b01      	subs	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80018ee:	e117      	b.n	8001b20 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d14e      	bne.n	8001996 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018fe:	2200      	movs	r2, #0
 8001900:	4906      	ldr	r1, [pc, #24]	@ (800191c <HAL_I2C_Mem_Read+0x22c>)
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 fa0e 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e11a      	b.n	8001b48 <HAL_I2C_Mem_Read+0x458>
 8001912:	bf00      	nop
 8001914:	00100002 	.word	0x00100002
 8001918:	ffff0000 	.word	0xffff0000
 800191c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800192e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194c:	3b01      	subs	r3, #1
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001958:	b29b      	uxth	r3, r3
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800197e:	3b01      	subs	r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198a:	b29b      	uxth	r3, r3
 800198c:	3b01      	subs	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001994:	e0c4      	b.n	8001b20 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800199c:	2200      	movs	r2, #0
 800199e:	496c      	ldr	r1, [pc, #432]	@ (8001b50 <HAL_I2C_Mem_Read+0x460>)
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 f9bf 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0cb      	b.n	8001b48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	3b01      	subs	r3, #1
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f8:	2200      	movs	r2, #0
 80019fa:	4955      	ldr	r1, [pc, #340]	@ (8001b50 <HAL_I2C_Mem_Read+0x460>)
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 f991 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e09d      	b.n	8001b48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a80:	e04e      	b.n	8001b20 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 faae 	bl	8001fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e058      	b.n	8001b48 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d124      	bne.n	8001b20 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d107      	bne.n	8001aee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f47f aeb6 	bne.w	8001896 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001b46:	2302      	movs	r3, #2
  }
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3728      	adds	r7, #40	@ 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	00010004 	.word	0x00010004

08001b54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	4608      	mov	r0, r1
 8001b5e:	4611      	mov	r1, r2
 8001b60:	461a      	mov	r2, r3
 8001b62:	4603      	mov	r3, r0
 8001b64:	817b      	strh	r3, [r7, #10]
 8001b66:	460b      	mov	r3, r1
 8001b68:	813b      	strh	r3, [r7, #8]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f8c2 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00d      	beq.n	8001bc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bb4:	d103      	bne.n	8001bbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0aa      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bc2:	897b      	ldrh	r3, [r7, #10]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	6a3a      	ldr	r2, [r7, #32]
 8001bd6:	4952      	ldr	r1, [pc, #328]	@ (8001d20 <I2C_RequestMemoryRead+0x1cc>)
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f91d 	bl	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e097      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c00:	6a39      	ldr	r1, [r7, #32]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f9a8 	bl	8001f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00d      	beq.n	8001c2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d107      	bne.n	8001c26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e076      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d105      	bne.n	8001c3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c30:	893b      	ldrh	r3, [r7, #8]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	611a      	str	r2, [r3, #16]
 8001c3a:	e021      	b.n	8001c80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c3c:	893b      	ldrh	r3, [r7, #8]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c4c:	6a39      	ldr	r1, [r7, #32]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f982 	bl	8001f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00d      	beq.n	8001c76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d107      	bne.n	8001c72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e050      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c76:	893b      	ldrh	r3, [r7, #8]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c82:	6a39      	ldr	r1, [r7, #32]
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 f967 	bl	8001f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00d      	beq.n	8001cac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d107      	bne.n	8001ca8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e035      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f82b 	bl	8001d24 <I2C_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ce2:	d103      	bne.n	8001cec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e013      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	6a3a      	ldr	r2, [r7, #32]
 8001d04:	4906      	ldr	r1, [pc, #24]	@ (8001d20 <I2C_RequestMemoryRead+0x1cc>)
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f886 	bl	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	00010002 	.word	0x00010002

08001d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d34:	e048      	b.n	8001dc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d044      	beq.n	8001dc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7ff f8b7 	bl	8000eb0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d139      	bne.n	8001dc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	0c1b      	lsrs	r3, r3, #16
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d10d      	bne.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	43da      	mvns	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	e00c      	b.n	8001d94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	43da      	mvns	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4013      	ands	r3, r2
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d116      	bne.n	8001dc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f043 0220 	orr.w	r2, r3, #32
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e023      	b.n	8001e10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	0c1b      	lsrs	r3, r3, #16
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d10d      	bne.n	8001dee <I2C_WaitOnFlagUntilTimeout+0xca>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	e00c      	b.n	8001e08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	43da      	mvns	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d093      	beq.n	8001d36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e26:	e071      	b.n	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e36:	d123      	bne.n	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	f043 0204 	orr.w	r2, r3, #4
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e067      	b.n	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e86:	d041      	beq.n	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e88:	f7ff f812 	bl	8000eb0 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d302      	bcc.n	8001e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d136      	bne.n	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d10c      	bne.n	8001ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	e00b      	b.n	8001eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d016      	beq.n	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e021      	b.n	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	0c1b      	lsrs	r3, r3, #16
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d10c      	bne.n	8001f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	4013      	ands	r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	e00b      	b.n	8001f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bf14      	ite	ne
 8001f42:	2301      	movne	r3, #1
 8001f44:	2300      	moveq	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f47f af6d 	bne.w	8001e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f64:	e034      	b.n	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f89b 	bl	80020a2 <I2C_IsAcknowledgeFailed>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e034      	b.n	8001fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d028      	beq.n	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7e:	f7fe ff97 	bl	8000eb0 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d302      	bcc.n	8001f94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d11d      	bne.n	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9e:	2b80      	cmp	r3, #128	@ 0x80
 8001fa0:	d016      	beq.n	8001fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	f043 0220 	orr.w	r2, r3, #32
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e007      	b.n	8001fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	2b80      	cmp	r3, #128	@ 0x80
 8001fdc:	d1c3      	bne.n	8001f66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ff4:	e049      	b.n	800208a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	2b10      	cmp	r3, #16
 8002002:	d119      	bne.n	8002038 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0210 	mvn.w	r2, #16
 800200c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e030      	b.n	800209a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002038:	f7fe ff3a 	bl	8000eb0 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	429a      	cmp	r2, r3
 8002046:	d302      	bcc.n	800204e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d11d      	bne.n	800208a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002058:	2b40      	cmp	r3, #64	@ 0x40
 800205a:	d016      	beq.n	800208a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2220      	movs	r2, #32
 8002066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f043 0220 	orr.w	r2, r3, #32
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e007      	b.n	800209a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002094:	2b40      	cmp	r3, #64	@ 0x40
 8002096:	d1ae      	bne.n	8001ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b8:	d11b      	bne.n	80020f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f043 0204 	orr.w	r2, r3, #4
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0cc      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002114:	4b68      	ldr	r3, [pc, #416]	@ (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d90c      	bls.n	800213c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b65      	ldr	r3, [pc, #404]	@ (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b63      	ldr	r3, [pc, #396]	@ (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0b8      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002154:	4b59      	ldr	r3, [pc, #356]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a58      	ldr	r2, [pc, #352]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800215e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800216c:	4b53      	ldr	r3, [pc, #332]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a52      	ldr	r2, [pc, #328]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b50      	ldr	r3, [pc, #320]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	494d      	ldr	r1, [pc, #308]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d044      	beq.n	8002220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b47      	ldr	r3, [pc, #284]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d119      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e07f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d003      	beq.n	80021be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021be:	4b3f      	ldr	r3, [pc, #252]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ce:	4b3b      	ldr	r3, [pc, #236]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e067      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021de:	4b37      	ldr	r3, [pc, #220]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f023 0203 	bic.w	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4934      	ldr	r1, [pc, #208]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f0:	f7fe fe5e 	bl	8000eb0 <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	e00a      	b.n	800220e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f8:	f7fe fe5a 	bl	8000eb0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e04f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	4b2b      	ldr	r3, [pc, #172]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 020c 	and.w	r2, r3, #12
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	429a      	cmp	r2, r3
 800221e:	d1eb      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002220:	4b25      	ldr	r3, [pc, #148]	@ (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d20c      	bcs.n	8002248 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e032      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002254:	4b19      	ldr	r3, [pc, #100]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4916      	ldr	r1, [pc, #88]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002272:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	490e      	ldr	r1, [pc, #56]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002286:	f000 f855 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 800228a:	4602      	mov	r2, r0
 800228c:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	490a      	ldr	r1, [pc, #40]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	5ccb      	ldrb	r3, [r1, r3]
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	4a09      	ldr	r2, [pc, #36]	@ (80022c4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022a2:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fdbe 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023c00 	.word	0x40023c00
 80022bc:	40023800 	.word	0x40023800
 80022c0:	080042c8 	.word	0x080042c8
 80022c4:	20000000 	.word	0x20000000
 80022c8:	20000004 	.word	0x20000004

080022cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d0:	4b03      	ldr	r3, [pc, #12]	@ (80022e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000000 	.word	0x20000000

080022e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022e8:	f7ff fff0 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	0a9b      	lsrs	r3, r3, #10
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	4903      	ldr	r1, [pc, #12]	@ (8002308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002300:	4618      	mov	r0, r3
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40023800 	.word	0x40023800
 8002308:	080042d8 	.word	0x080042d8

0800230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002310:	f7ff ffdc 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b05      	ldr	r3, [pc, #20]	@ (800232c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0b5b      	lsrs	r3, r3, #13
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4903      	ldr	r1, [pc, #12]	@ (8002330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002328:	4618      	mov	r0, r3
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40023800 	.word	0x40023800
 8002330:	080042d8 	.word	0x080042d8

08002334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002338:	b0ae      	sub	sp, #184	@ 0xb8
 800233a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800235a:	4bcb      	ldr	r3, [pc, #812]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b0c      	cmp	r3, #12
 8002364:	f200 8206 	bhi.w	8002774 <HAL_RCC_GetSysClockFreq+0x440>
 8002368:	a201      	add	r2, pc, #4	@ (adr r2, 8002370 <HAL_RCC_GetSysClockFreq+0x3c>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	080023a5 	.word	0x080023a5
 8002374:	08002775 	.word	0x08002775
 8002378:	08002775 	.word	0x08002775
 800237c:	08002775 	.word	0x08002775
 8002380:	080023ad 	.word	0x080023ad
 8002384:	08002775 	.word	0x08002775
 8002388:	08002775 	.word	0x08002775
 800238c:	08002775 	.word	0x08002775
 8002390:	080023b5 	.word	0x080023b5
 8002394:	08002775 	.word	0x08002775
 8002398:	08002775 	.word	0x08002775
 800239c:	08002775 	.word	0x08002775
 80023a0:	080025a5 	.word	0x080025a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023a4:	4bb9      	ldr	r3, [pc, #740]	@ (800268c <HAL_RCC_GetSysClockFreq+0x358>)
 80023a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023aa:	e1e7      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ac:	4bb8      	ldr	r3, [pc, #736]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023b2:	e1e3      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b4:	4bb4      	ldr	r3, [pc, #720]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c0:	4bb1      	ldr	r3, [pc, #708]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d071      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023cc:	4bae      	ldr	r3, [pc, #696]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	2200      	movs	r2, #0
 80023d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80023d8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80023dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80023ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80023f2:	4622      	mov	r2, r4
 80023f4:	462b      	mov	r3, r5
 80023f6:	f04f 0000 	mov.w	r0, #0
 80023fa:	f04f 0100 	mov.w	r1, #0
 80023fe:	0159      	lsls	r1, r3, #5
 8002400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002404:	0150      	lsls	r0, r2, #5
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4621      	mov	r1, r4
 800240c:	1a51      	subs	r1, r2, r1
 800240e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002410:	4629      	mov	r1, r5
 8002412:	eb63 0301 	sbc.w	r3, r3, r1
 8002416:	647b      	str	r3, [r7, #68]	@ 0x44
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002424:	4649      	mov	r1, r9
 8002426:	018b      	lsls	r3, r1, #6
 8002428:	4641      	mov	r1, r8
 800242a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800242e:	4641      	mov	r1, r8
 8002430:	018a      	lsls	r2, r1, #6
 8002432:	4641      	mov	r1, r8
 8002434:	1a51      	subs	r1, r2, r1
 8002436:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002438:	4649      	mov	r1, r9
 800243a:	eb63 0301 	sbc.w	r3, r3, r1
 800243e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800244c:	4649      	mov	r1, r9
 800244e:	00cb      	lsls	r3, r1, #3
 8002450:	4641      	mov	r1, r8
 8002452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002456:	4641      	mov	r1, r8
 8002458:	00ca      	lsls	r2, r1, #3
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	4603      	mov	r3, r0
 8002460:	4622      	mov	r2, r4
 8002462:	189b      	adds	r3, r3, r2
 8002464:	633b      	str	r3, [r7, #48]	@ 0x30
 8002466:	462b      	mov	r3, r5
 8002468:	460a      	mov	r2, r1
 800246a:	eb42 0303 	adc.w	r3, r2, r3
 800246e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800247c:	4629      	mov	r1, r5
 800247e:	024b      	lsls	r3, r1, #9
 8002480:	4621      	mov	r1, r4
 8002482:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002486:	4621      	mov	r1, r4
 8002488:	024a      	lsls	r2, r1, #9
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002492:	2200      	movs	r2, #0
 8002494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002498:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800249c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80024a0:	f7fd ff06 	bl	80002b0 <__aeabi_uldivmod>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4613      	mov	r3, r2
 80024aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024ae:	e067      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b0:	4b75      	ldr	r3, [pc, #468]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	2200      	movs	r2, #0
 80024b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024bc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80024c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024ca:	2300      	movs	r3, #0
 80024cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80024d2:	4622      	mov	r2, r4
 80024d4:	462b      	mov	r3, r5
 80024d6:	f04f 0000 	mov.w	r0, #0
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	0159      	lsls	r1, r3, #5
 80024e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e4:	0150      	lsls	r0, r2, #5
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4621      	mov	r1, r4
 80024ec:	1a51      	subs	r1, r2, r1
 80024ee:	62b9      	str	r1, [r7, #40]	@ 0x28
 80024f0:	4629      	mov	r1, r5
 80024f2:	eb63 0301 	sbc.w	r3, r3, r1
 80024f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002504:	4649      	mov	r1, r9
 8002506:	018b      	lsls	r3, r1, #6
 8002508:	4641      	mov	r1, r8
 800250a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800250e:	4641      	mov	r1, r8
 8002510:	018a      	lsls	r2, r1, #6
 8002512:	4641      	mov	r1, r8
 8002514:	ebb2 0a01 	subs.w	sl, r2, r1
 8002518:	4649      	mov	r1, r9
 800251a:	eb63 0b01 	sbc.w	fp, r3, r1
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800252a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800252e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002532:	4692      	mov	sl, r2
 8002534:	469b      	mov	fp, r3
 8002536:	4623      	mov	r3, r4
 8002538:	eb1a 0303 	adds.w	r3, sl, r3
 800253c:	623b      	str	r3, [r7, #32]
 800253e:	462b      	mov	r3, r5
 8002540:	eb4b 0303 	adc.w	r3, fp, r3
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002552:	4629      	mov	r1, r5
 8002554:	028b      	lsls	r3, r1, #10
 8002556:	4621      	mov	r1, r4
 8002558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800255c:	4621      	mov	r1, r4
 800255e:	028a      	lsls	r2, r1, #10
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002568:	2200      	movs	r2, #0
 800256a:	673b      	str	r3, [r7, #112]	@ 0x70
 800256c:	677a      	str	r2, [r7, #116]	@ 0x74
 800256e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002572:	f7fd fe9d 	bl	80002b0 <__aeabi_uldivmod>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4613      	mov	r3, r2
 800257c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002580:	4b41      	ldr	r3, [pc, #260]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025a2:	e0eb      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a4:	4b38      	ldr	r3, [pc, #224]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b0:	4b35      	ldr	r3, [pc, #212]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d06b      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025bc:	4b32      	ldr	r3, [pc, #200]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	2200      	movs	r2, #0
 80025c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80025d0:	2300      	movs	r3, #0
 80025d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80025d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80025d8:	4622      	mov	r2, r4
 80025da:	462b      	mov	r3, r5
 80025dc:	f04f 0000 	mov.w	r0, #0
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	0159      	lsls	r1, r3, #5
 80025e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ea:	0150      	lsls	r0, r2, #5
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4621      	mov	r1, r4
 80025f2:	1a51      	subs	r1, r2, r1
 80025f4:	61b9      	str	r1, [r7, #24]
 80025f6:	4629      	mov	r1, r5
 80025f8:	eb63 0301 	sbc.w	r3, r3, r1
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800260a:	4659      	mov	r1, fp
 800260c:	018b      	lsls	r3, r1, #6
 800260e:	4651      	mov	r1, sl
 8002610:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002614:	4651      	mov	r1, sl
 8002616:	018a      	lsls	r2, r1, #6
 8002618:	4651      	mov	r1, sl
 800261a:	ebb2 0801 	subs.w	r8, r2, r1
 800261e:	4659      	mov	r1, fp
 8002620:	eb63 0901 	sbc.w	r9, r3, r1
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002630:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002634:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002638:	4690      	mov	r8, r2
 800263a:	4699      	mov	r9, r3
 800263c:	4623      	mov	r3, r4
 800263e:	eb18 0303 	adds.w	r3, r8, r3
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	462b      	mov	r3, r5
 8002646:	eb49 0303 	adc.w	r3, r9, r3
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002658:	4629      	mov	r1, r5
 800265a:	024b      	lsls	r3, r1, #9
 800265c:	4621      	mov	r1, r4
 800265e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002662:	4621      	mov	r1, r4
 8002664:	024a      	lsls	r2, r1, #9
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800266e:	2200      	movs	r2, #0
 8002670:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002672:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002674:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002678:	f7fd fe1a 	bl	80002b0 <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4613      	mov	r3, r2
 8002682:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002686:	e065      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x420>
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002694:	4b3d      	ldr	r3, [pc, #244]	@ (800278c <HAL_RCC_GetSysClockFreq+0x458>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	099b      	lsrs	r3, r3, #6
 800269a:	2200      	movs	r2, #0
 800269c:	4618      	mov	r0, r3
 800269e:	4611      	mov	r1, r2
 80026a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80026a6:	2300      	movs	r3, #0
 80026a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80026aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80026ae:	4642      	mov	r2, r8
 80026b0:	464b      	mov	r3, r9
 80026b2:	f04f 0000 	mov.w	r0, #0
 80026b6:	f04f 0100 	mov.w	r1, #0
 80026ba:	0159      	lsls	r1, r3, #5
 80026bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c0:	0150      	lsls	r0, r2, #5
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4641      	mov	r1, r8
 80026c8:	1a51      	subs	r1, r2, r1
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	4649      	mov	r1, r9
 80026ce:	eb63 0301 	sbc.w	r3, r3, r1
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80026e0:	4659      	mov	r1, fp
 80026e2:	018b      	lsls	r3, r1, #6
 80026e4:	4651      	mov	r1, sl
 80026e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ea:	4651      	mov	r1, sl
 80026ec:	018a      	lsls	r2, r1, #6
 80026ee:	4651      	mov	r1, sl
 80026f0:	1a54      	subs	r4, r2, r1
 80026f2:	4659      	mov	r1, fp
 80026f4:	eb63 0501 	sbc.w	r5, r3, r1
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	00eb      	lsls	r3, r5, #3
 8002702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002706:	00e2      	lsls	r2, r4, #3
 8002708:	4614      	mov	r4, r2
 800270a:	461d      	mov	r5, r3
 800270c:	4643      	mov	r3, r8
 800270e:	18e3      	adds	r3, r4, r3
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	464b      	mov	r3, r9
 8002714:	eb45 0303 	adc.w	r3, r5, r3
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002726:	4629      	mov	r1, r5
 8002728:	028b      	lsls	r3, r1, #10
 800272a:	4621      	mov	r1, r4
 800272c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002730:	4621      	mov	r1, r4
 8002732:	028a      	lsls	r2, r1, #10
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800273c:	2200      	movs	r2, #0
 800273e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002740:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002742:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002746:	f7fd fdb3 	bl	80002b0 <__aeabi_uldivmod>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4613      	mov	r3, r2
 8002750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002754:	4b0d      	ldr	r3, [pc, #52]	@ (800278c <HAL_RCC_GetSysClockFreq+0x458>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	0f1b      	lsrs	r3, r3, #28
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002766:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002772:	e003      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002776:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800277a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002780:	4618      	mov	r0, r3
 8002782:	37b8      	adds	r7, #184	@ 0xb8
 8002784:	46bd      	mov	sp, r7
 8002786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	00f42400 	.word	0x00f42400

08002794 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e28d      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8083 	beq.w	80028ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027b4:	4b94      	ldr	r3, [pc, #592]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d019      	beq.n	80027f4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027c0:	4b91      	ldr	r3, [pc, #580]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 030c 	and.w	r3, r3, #12
        || \
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d106      	bne.n	80027da <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d8:	d00c      	beq.n	80027f4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027da:	4b8b      	ldr	r3, [pc, #556]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d112      	bne.n	800280c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e6:	4b88      	ldr	r3, [pc, #544]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027f2:	d10b      	bne.n	800280c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	4b84      	ldr	r3, [pc, #528]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d05b      	beq.n	80028b8 <HAL_RCC_OscConfig+0x124>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d157      	bne.n	80028b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e25a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002814:	d106      	bne.n	8002824 <HAL_RCC_OscConfig+0x90>
 8002816:	4b7c      	ldr	r3, [pc, #496]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7b      	ldr	r2, [pc, #492]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e01d      	b.n	8002860 <HAL_RCC_OscConfig+0xcc>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0xb4>
 800282e:	4b76      	ldr	r3, [pc, #472]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a75      	ldr	r2, [pc, #468]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b73      	ldr	r3, [pc, #460]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a72      	ldr	r2, [pc, #456]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0xcc>
 8002848:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 800284e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b6c      	ldr	r3, [pc, #432]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6b      	ldr	r2, [pc, #428]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 800285a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800285e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d013      	beq.n	8002890 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fb22 	bl	8000eb0 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002870:	f7fe fb1e 	bl	8000eb0 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	@ 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e21f      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b61      	ldr	r3, [pc, #388]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0xdc>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fb0e 	bl	8000eb0 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7fe fb0a 	bl	8000eb0 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	@ 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e20b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	4b57      	ldr	r3, [pc, #348]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x104>
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d06f      	beq.n	80029a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028c6:	4b50      	ldr	r3, [pc, #320]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d017      	beq.n	8002902 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d105      	bne.n	80028ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028de:	4b4a      	ldr	r3, [pc, #296]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ea:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d11c      	bne.n	8002930 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f6:	4b44      	ldr	r3, [pc, #272]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d116      	bne.n	8002930 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	4b41      	ldr	r3, [pc, #260]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_RCC_OscConfig+0x186>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d001      	beq.n	800291a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e1d3      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4937      	ldr	r1, [pc, #220]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292e:	e03a      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002938:	4b34      	ldr	r3, [pc, #208]	@ (8002a0c <HAL_RCC_OscConfig+0x278>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe fab7 	bl	8000eb0 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002946:	f7fe fab3 	bl	8000eb0 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e1b4      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	4b2b      	ldr	r3, [pc, #172]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b28      	ldr	r3, [pc, #160]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4925      	ldr	r1, [pc, #148]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]
 8002978:	e015      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297a:	4b24      	ldr	r3, [pc, #144]	@ (8002a0c <HAL_RCC_OscConfig+0x278>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fa96 	bl	8000eb0 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002988:	f7fe fa92 	bl	8000eb0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e193      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d036      	beq.n	8002a20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d016      	beq.n	80029e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ba:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe fa76 	bl	8000eb0 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c8:	f7fe fa72 	bl	8000eb0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e173      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80029dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x234>
 80029e6:	e01b      	b.n	8002a20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e8:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7fe fa5f 	bl	8000eb0 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f4:	e00e      	b.n	8002a14 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f6:	f7fe fa5b 	bl	8000eb0 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d907      	bls.n	8002a14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e15c      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	42470000 	.word	0x42470000
 8002a10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a14:	4b8a      	ldr	r3, [pc, #552]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ea      	bne.n	80029f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8097 	beq.w	8002b5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a32:	4b83      	ldr	r3, [pc, #524]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10f      	bne.n	8002a5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	4b7f      	ldr	r3, [pc, #508]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	4a7e      	ldr	r2, [pc, #504]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b79      	ldr	r3, [pc, #484]	@ (8002c44 <HAL_RCC_OscConfig+0x4b0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d118      	bne.n	8002a9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6a:	4b76      	ldr	r3, [pc, #472]	@ (8002c44 <HAL_RCC_OscConfig+0x4b0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a75      	ldr	r2, [pc, #468]	@ (8002c44 <HAL_RCC_OscConfig+0x4b0>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fa1b 	bl	8000eb0 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7e:	f7fe fa17 	bl	8000eb0 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e118      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	4b6c      	ldr	r3, [pc, #432]	@ (8002c44 <HAL_RCC_OscConfig+0x4b0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x31e>
 8002aa4:	4b66      	ldr	r3, [pc, #408]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa8:	4a65      	ldr	r2, [pc, #404]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab0:	e01c      	b.n	8002aec <HAL_RCC_OscConfig+0x358>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x340>
 8002aba:	4b61      	ldr	r3, [pc, #388]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	4a60      	ldr	r2, [pc, #384]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002ac0:	f043 0304 	orr.w	r3, r3, #4
 8002ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac6:	4b5e      	ldr	r3, [pc, #376]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aca:	4a5d      	ldr	r2, [pc, #372]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_OscConfig+0x358>
 8002ad4:	4b5a      	ldr	r3, [pc, #360]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad8:	4a59      	ldr	r2, [pc, #356]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae0:	4b57      	ldr	r3, [pc, #348]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae4:	4a56      	ldr	r2, [pc, #344]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002ae6:	f023 0304 	bic.w	r3, r3, #4
 8002aea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d015      	beq.n	8002b20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe f9dc 	bl	8000eb0 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7fe f9d8 	bl	8000eb0 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e0d7      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b12:	4b4b      	ldr	r3, [pc, #300]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0ee      	beq.n	8002afc <HAL_RCC_OscConfig+0x368>
 8002b1e:	e014      	b.n	8002b4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7fe f9c6 	bl	8000eb0 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7fe f9c2 	bl	8000eb0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0c1      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3e:	4b40      	ldr	r3, [pc, #256]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1ee      	bne.n	8002b28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b4a:	7dfb      	ldrb	r3, [r7, #23]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b50:	4b3b      	ldr	r3, [pc, #236]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	4a3a      	ldr	r2, [pc, #232]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80ad 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b66:	4b36      	ldr	r3, [pc, #216]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d060      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d145      	bne.n	8002c06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7a:	4b33      	ldr	r3, [pc, #204]	@ (8002c48 <HAL_RCC_OscConfig+0x4b4>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe f996 	bl	8000eb0 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe f992 	bl	8000eb0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e093      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	4b29      	ldr	r3, [pc, #164]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	019b      	lsls	r3, r3, #6
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	085b      	lsrs	r3, r3, #1
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	061b      	lsls	r3, r3, #24
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd0:	071b      	lsls	r3, r3, #28
 8002bd2:	491b      	ldr	r1, [pc, #108]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <HAL_RCC_OscConfig+0x4b4>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe f967 	bl	8000eb0 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fe f963 	bl	8000eb0 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e064      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf8:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x452>
 8002c04:	e05c      	b.n	8002cc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c06:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <HAL_RCC_OscConfig+0x4b4>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe f950 	bl	8000eb0 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe f94c 	bl	8000eb0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e04d      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x480>
 8002c32:	e045      	b.n	8002cc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e040      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40007000 	.word	0x40007000
 8002c48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ccc <HAL_RCC_OscConfig+0x538>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d030      	beq.n	8002cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d129      	bne.n	8002cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d122      	bne.n	8002cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d119      	bne.n	8002cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c92:	085b      	lsrs	r3, r3, #1
 8002c94:	3b01      	subs	r3, #1
 8002c96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d10f      	bne.n	8002cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e07b      	b.n	8002dda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d108      	bne.n	8002cfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cf2:	d009      	beq.n	8002d08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
 8002cfa:	e005      	b.n	8002d08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd febc 	bl	8000aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8c:	ea42 0103 	orr.w	r1, r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	f003 0104 	and.w	r1, r3, #4
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	f003 0210 	and.w	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69da      	ldr	r2, [r3, #28]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e042      	b.n	8002e7a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7fd feb1 	bl	8000b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2224      	movs	r2, #36	@ 0x24
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e24:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f82c 	bl	8002e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e3a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e4a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e5a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e88:	b0c0      	sub	sp, #256	@ 0x100
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	68d9      	ldr	r1, [r3, #12]
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	ea40 0301 	orr.w	r3, r0, r1
 8002eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002edc:	f021 010c 	bic.w	r1, r1, #12
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002eea:	430b      	orrs	r3, r1
 8002eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efe:	6999      	ldr	r1, [r3, #24]
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	ea40 0301 	orr.w	r3, r0, r1
 8002f0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b8f      	ldr	r3, [pc, #572]	@ (8003150 <UART_SetConfig+0x2cc>)
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d005      	beq.n	8002f24 <UART_SetConfig+0xa0>
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8003154 <UART_SetConfig+0x2d0>)
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d104      	bne.n	8002f2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f24:	f7ff f9f2 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 8002f28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f2c:	e003      	b.n	8002f36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f2e:	f7ff f9d9 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 8002f32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f40:	f040 810c 	bne.w	800315c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f56:	4622      	mov	r2, r4
 8002f58:	462b      	mov	r3, r5
 8002f5a:	1891      	adds	r1, r2, r2
 8002f5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f5e:	415b      	adcs	r3, r3
 8002f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f66:	4621      	mov	r1, r4
 8002f68:	eb12 0801 	adds.w	r8, r2, r1
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	eb43 0901 	adc.w	r9, r3, r1
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f86:	4690      	mov	r8, r2
 8002f88:	4699      	mov	r9, r3
 8002f8a:	4623      	mov	r3, r4
 8002f8c:	eb18 0303 	adds.w	r3, r8, r3
 8002f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f94:	462b      	mov	r3, r5
 8002f96:	eb49 0303 	adc.w	r3, r9, r3
 8002f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002faa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	18db      	adds	r3, r3, r3
 8002fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fb8:	4613      	mov	r3, r2
 8002fba:	eb42 0303 	adc.w	r3, r2, r3
 8002fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fc8:	f7fd f972 	bl	80002b0 <__aeabi_uldivmod>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4b61      	ldr	r3, [pc, #388]	@ (8003158 <UART_SetConfig+0x2d4>)
 8002fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	011c      	lsls	r4, r3, #4
 8002fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fe4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fe8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fec:	4642      	mov	r2, r8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	1891      	adds	r1, r2, r2
 8002ff2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ff4:	415b      	adcs	r3, r3
 8002ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ff8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	eb12 0a01 	adds.w	sl, r2, r1
 8003002:	4649      	mov	r1, r9
 8003004:	eb43 0b01 	adc.w	fp, r3, r1
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003014:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800301c:	4692      	mov	sl, r2
 800301e:	469b      	mov	fp, r3
 8003020:	4643      	mov	r3, r8
 8003022:	eb1a 0303 	adds.w	r3, sl, r3
 8003026:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800302a:	464b      	mov	r3, r9
 800302c:	eb4b 0303 	adc.w	r3, fp, r3
 8003030:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003040:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003044:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003048:	460b      	mov	r3, r1
 800304a:	18db      	adds	r3, r3, r3
 800304c:	643b      	str	r3, [r7, #64]	@ 0x40
 800304e:	4613      	mov	r3, r2
 8003050:	eb42 0303 	adc.w	r3, r2, r3
 8003054:	647b      	str	r3, [r7, #68]	@ 0x44
 8003056:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800305a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800305e:	f7fd f927 	bl	80002b0 <__aeabi_uldivmod>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4611      	mov	r1, r2
 8003068:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <UART_SetConfig+0x2d4>)
 800306a:	fba3 2301 	umull	r2, r3, r3, r1
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2264      	movs	r2, #100	@ 0x64
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	1acb      	subs	r3, r1, r3
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800307e:	4b36      	ldr	r3, [pc, #216]	@ (8003158 <UART_SetConfig+0x2d4>)
 8003080:	fba3 2302 	umull	r2, r3, r3, r2
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800308c:	441c      	add	r4, r3
 800308e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003092:	2200      	movs	r2, #0
 8003094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003098:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800309c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80030a0:	4642      	mov	r2, r8
 80030a2:	464b      	mov	r3, r9
 80030a4:	1891      	adds	r1, r2, r2
 80030a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030a8:	415b      	adcs	r3, r3
 80030aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030b0:	4641      	mov	r1, r8
 80030b2:	1851      	adds	r1, r2, r1
 80030b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80030b6:	4649      	mov	r1, r9
 80030b8:	414b      	adcs	r3, r1
 80030ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030c8:	4659      	mov	r1, fp
 80030ca:	00cb      	lsls	r3, r1, #3
 80030cc:	4651      	mov	r1, sl
 80030ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030d2:	4651      	mov	r1, sl
 80030d4:	00ca      	lsls	r2, r1, #3
 80030d6:	4610      	mov	r0, r2
 80030d8:	4619      	mov	r1, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	4642      	mov	r2, r8
 80030de:	189b      	adds	r3, r3, r2
 80030e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030e4:	464b      	mov	r3, r9
 80030e6:	460a      	mov	r2, r1
 80030e8:	eb42 0303 	adc.w	r3, r2, r3
 80030ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003100:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003104:	460b      	mov	r3, r1
 8003106:	18db      	adds	r3, r3, r3
 8003108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800310a:	4613      	mov	r3, r2
 800310c:	eb42 0303 	adc.w	r3, r2, r3
 8003110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003112:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003116:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800311a:	f7fd f8c9 	bl	80002b0 <__aeabi_uldivmod>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4b0d      	ldr	r3, [pc, #52]	@ (8003158 <UART_SetConfig+0x2d4>)
 8003124:	fba3 1302 	umull	r1, r3, r3, r2
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	2164      	movs	r1, #100	@ 0x64
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	3332      	adds	r3, #50	@ 0x32
 8003136:	4a08      	ldr	r2, [pc, #32]	@ (8003158 <UART_SetConfig+0x2d4>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	f003 0207 	and.w	r2, r3, #7
 8003142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4422      	add	r2, r4
 800314a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800314c:	e106      	b.n	800335c <UART_SetConfig+0x4d8>
 800314e:	bf00      	nop
 8003150:	40011000 	.word	0x40011000
 8003154:	40011400 	.word	0x40011400
 8003158:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800315c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003160:	2200      	movs	r2, #0
 8003162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003166:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800316a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800316e:	4642      	mov	r2, r8
 8003170:	464b      	mov	r3, r9
 8003172:	1891      	adds	r1, r2, r2
 8003174:	6239      	str	r1, [r7, #32]
 8003176:	415b      	adcs	r3, r3
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
 800317a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800317e:	4641      	mov	r1, r8
 8003180:	1854      	adds	r4, r2, r1
 8003182:	4649      	mov	r1, r9
 8003184:	eb43 0501 	adc.w	r5, r3, r1
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	00eb      	lsls	r3, r5, #3
 8003192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003196:	00e2      	lsls	r2, r4, #3
 8003198:	4614      	mov	r4, r2
 800319a:	461d      	mov	r5, r3
 800319c:	4643      	mov	r3, r8
 800319e:	18e3      	adds	r3, r4, r3
 80031a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031a4:	464b      	mov	r3, r9
 80031a6:	eb45 0303 	adc.w	r3, r5, r3
 80031aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031ca:	4629      	mov	r1, r5
 80031cc:	008b      	lsls	r3, r1, #2
 80031ce:	4621      	mov	r1, r4
 80031d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d4:	4621      	mov	r1, r4
 80031d6:	008a      	lsls	r2, r1, #2
 80031d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031dc:	f7fd f868 	bl	80002b0 <__aeabi_uldivmod>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4b60      	ldr	r3, [pc, #384]	@ (8003368 <UART_SetConfig+0x4e4>)
 80031e6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	011c      	lsls	r4, r3, #4
 80031ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003200:	4642      	mov	r2, r8
 8003202:	464b      	mov	r3, r9
 8003204:	1891      	adds	r1, r2, r2
 8003206:	61b9      	str	r1, [r7, #24]
 8003208:	415b      	adcs	r3, r3
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003210:	4641      	mov	r1, r8
 8003212:	1851      	adds	r1, r2, r1
 8003214:	6139      	str	r1, [r7, #16]
 8003216:	4649      	mov	r1, r9
 8003218:	414b      	adcs	r3, r1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003228:	4659      	mov	r1, fp
 800322a:	00cb      	lsls	r3, r1, #3
 800322c:	4651      	mov	r1, sl
 800322e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003232:	4651      	mov	r1, sl
 8003234:	00ca      	lsls	r2, r1, #3
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	4603      	mov	r3, r0
 800323c:	4642      	mov	r2, r8
 800323e:	189b      	adds	r3, r3, r2
 8003240:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003244:	464b      	mov	r3, r9
 8003246:	460a      	mov	r2, r1
 8003248:	eb42 0303 	adc.w	r3, r2, r3
 800324c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	67bb      	str	r3, [r7, #120]	@ 0x78
 800325a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003268:	4649      	mov	r1, r9
 800326a:	008b      	lsls	r3, r1, #2
 800326c:	4641      	mov	r1, r8
 800326e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003272:	4641      	mov	r1, r8
 8003274:	008a      	lsls	r2, r1, #2
 8003276:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800327a:	f7fd f819 	bl	80002b0 <__aeabi_uldivmod>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4611      	mov	r1, r2
 8003284:	4b38      	ldr	r3, [pc, #224]	@ (8003368 <UART_SetConfig+0x4e4>)
 8003286:	fba3 2301 	umull	r2, r3, r3, r1
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2264      	movs	r2, #100	@ 0x64
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	1acb      	subs	r3, r1, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	3332      	adds	r3, #50	@ 0x32
 8003298:	4a33      	ldr	r2, [pc, #204]	@ (8003368 <UART_SetConfig+0x4e4>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032a4:	441c      	add	r4, r3
 80032a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032aa:	2200      	movs	r2, #0
 80032ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80032ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80032b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80032b4:	4642      	mov	r2, r8
 80032b6:	464b      	mov	r3, r9
 80032b8:	1891      	adds	r1, r2, r2
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	415b      	adcs	r3, r3
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032c4:	4641      	mov	r1, r8
 80032c6:	1851      	adds	r1, r2, r1
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	4649      	mov	r1, r9
 80032cc:	414b      	adcs	r3, r1
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032dc:	4659      	mov	r1, fp
 80032de:	00cb      	lsls	r3, r1, #3
 80032e0:	4651      	mov	r1, sl
 80032e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e6:	4651      	mov	r1, sl
 80032e8:	00ca      	lsls	r2, r1, #3
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	4642      	mov	r2, r8
 80032f2:	189b      	adds	r3, r3, r2
 80032f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032f6:	464b      	mov	r3, r9
 80032f8:	460a      	mov	r2, r1
 80032fa:	eb42 0303 	adc.w	r3, r2, r3
 80032fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	663b      	str	r3, [r7, #96]	@ 0x60
 800330a:	667a      	str	r2, [r7, #100]	@ 0x64
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003318:	4649      	mov	r1, r9
 800331a:	008b      	lsls	r3, r1, #2
 800331c:	4641      	mov	r1, r8
 800331e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003322:	4641      	mov	r1, r8
 8003324:	008a      	lsls	r2, r1, #2
 8003326:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800332a:	f7fc ffc1 	bl	80002b0 <__aeabi_uldivmod>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <UART_SetConfig+0x4e4>)
 8003334:	fba3 1302 	umull	r1, r3, r3, r2
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	2164      	movs	r1, #100	@ 0x64
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	3332      	adds	r3, #50	@ 0x32
 8003346:	4a08      	ldr	r2, [pc, #32]	@ (8003368 <UART_SetConfig+0x4e4>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	f003 020f 	and.w	r2, r3, #15
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4422      	add	r2, r4
 800335a:	609a      	str	r2, [r3, #8]
}
 800335c:	bf00      	nop
 800335e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003362:	46bd      	mov	sp, r7
 8003364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003368:	51eb851f 	.word	0x51eb851f

0800336c <std>:
 800336c:	2300      	movs	r3, #0
 800336e:	b510      	push	{r4, lr}
 8003370:	4604      	mov	r4, r0
 8003372:	e9c0 3300 	strd	r3, r3, [r0]
 8003376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800337a:	6083      	str	r3, [r0, #8]
 800337c:	8181      	strh	r1, [r0, #12]
 800337e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003380:	81c2      	strh	r2, [r0, #14]
 8003382:	6183      	str	r3, [r0, #24]
 8003384:	4619      	mov	r1, r3
 8003386:	2208      	movs	r2, #8
 8003388:	305c      	adds	r0, #92	@ 0x5c
 800338a:	f000 f9f9 	bl	8003780 <memset>
 800338e:	4b0d      	ldr	r3, [pc, #52]	@ (80033c4 <std+0x58>)
 8003390:	6263      	str	r3, [r4, #36]	@ 0x24
 8003392:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <std+0x5c>)
 8003394:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003396:	4b0d      	ldr	r3, [pc, #52]	@ (80033cc <std+0x60>)
 8003398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800339a:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <std+0x64>)
 800339c:	6323      	str	r3, [r4, #48]	@ 0x30
 800339e:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <std+0x68>)
 80033a0:	6224      	str	r4, [r4, #32]
 80033a2:	429c      	cmp	r4, r3
 80033a4:	d006      	beq.n	80033b4 <std+0x48>
 80033a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80033aa:	4294      	cmp	r4, r2
 80033ac:	d002      	beq.n	80033b4 <std+0x48>
 80033ae:	33d0      	adds	r3, #208	@ 0xd0
 80033b0:	429c      	cmp	r4, r3
 80033b2:	d105      	bne.n	80033c0 <std+0x54>
 80033b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80033b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033bc:	f000 ba58 	b.w	8003870 <__retarget_lock_init_recursive>
 80033c0:	bd10      	pop	{r4, pc}
 80033c2:	bf00      	nop
 80033c4:	080035d1 	.word	0x080035d1
 80033c8:	080035f3 	.word	0x080035f3
 80033cc:	0800362b 	.word	0x0800362b
 80033d0:	0800364f 	.word	0x0800364f
 80033d4:	20000180 	.word	0x20000180

080033d8 <stdio_exit_handler>:
 80033d8:	4a02      	ldr	r2, [pc, #8]	@ (80033e4 <stdio_exit_handler+0xc>)
 80033da:	4903      	ldr	r1, [pc, #12]	@ (80033e8 <stdio_exit_handler+0x10>)
 80033dc:	4803      	ldr	r0, [pc, #12]	@ (80033ec <stdio_exit_handler+0x14>)
 80033de:	f000 b869 	b.w	80034b4 <_fwalk_sglue>
 80033e2:	bf00      	nop
 80033e4:	2000000c 	.word	0x2000000c
 80033e8:	08004111 	.word	0x08004111
 80033ec:	2000001c 	.word	0x2000001c

080033f0 <cleanup_stdio>:
 80033f0:	6841      	ldr	r1, [r0, #4]
 80033f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003424 <cleanup_stdio+0x34>)
 80033f4:	4299      	cmp	r1, r3
 80033f6:	b510      	push	{r4, lr}
 80033f8:	4604      	mov	r4, r0
 80033fa:	d001      	beq.n	8003400 <cleanup_stdio+0x10>
 80033fc:	f000 fe88 	bl	8004110 <_fflush_r>
 8003400:	68a1      	ldr	r1, [r4, #8]
 8003402:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <cleanup_stdio+0x38>)
 8003404:	4299      	cmp	r1, r3
 8003406:	d002      	beq.n	800340e <cleanup_stdio+0x1e>
 8003408:	4620      	mov	r0, r4
 800340a:	f000 fe81 	bl	8004110 <_fflush_r>
 800340e:	68e1      	ldr	r1, [r4, #12]
 8003410:	4b06      	ldr	r3, [pc, #24]	@ (800342c <cleanup_stdio+0x3c>)
 8003412:	4299      	cmp	r1, r3
 8003414:	d004      	beq.n	8003420 <cleanup_stdio+0x30>
 8003416:	4620      	mov	r0, r4
 8003418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341c:	f000 be78 	b.w	8004110 <_fflush_r>
 8003420:	bd10      	pop	{r4, pc}
 8003422:	bf00      	nop
 8003424:	20000180 	.word	0x20000180
 8003428:	200001e8 	.word	0x200001e8
 800342c:	20000250 	.word	0x20000250

08003430 <global_stdio_init.part.0>:
 8003430:	b510      	push	{r4, lr}
 8003432:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <global_stdio_init.part.0+0x30>)
 8003434:	4c0b      	ldr	r4, [pc, #44]	@ (8003464 <global_stdio_init.part.0+0x34>)
 8003436:	4a0c      	ldr	r2, [pc, #48]	@ (8003468 <global_stdio_init.part.0+0x38>)
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	4620      	mov	r0, r4
 800343c:	2200      	movs	r2, #0
 800343e:	2104      	movs	r1, #4
 8003440:	f7ff ff94 	bl	800336c <std>
 8003444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003448:	2201      	movs	r2, #1
 800344a:	2109      	movs	r1, #9
 800344c:	f7ff ff8e 	bl	800336c <std>
 8003450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003454:	2202      	movs	r2, #2
 8003456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800345a:	2112      	movs	r1, #18
 800345c:	f7ff bf86 	b.w	800336c <std>
 8003460:	200002b8 	.word	0x200002b8
 8003464:	20000180 	.word	0x20000180
 8003468:	080033d9 	.word	0x080033d9

0800346c <__sfp_lock_acquire>:
 800346c:	4801      	ldr	r0, [pc, #4]	@ (8003474 <__sfp_lock_acquire+0x8>)
 800346e:	f000 ba00 	b.w	8003872 <__retarget_lock_acquire_recursive>
 8003472:	bf00      	nop
 8003474:	200002c1 	.word	0x200002c1

08003478 <__sfp_lock_release>:
 8003478:	4801      	ldr	r0, [pc, #4]	@ (8003480 <__sfp_lock_release+0x8>)
 800347a:	f000 b9fb 	b.w	8003874 <__retarget_lock_release_recursive>
 800347e:	bf00      	nop
 8003480:	200002c1 	.word	0x200002c1

08003484 <__sinit>:
 8003484:	b510      	push	{r4, lr}
 8003486:	4604      	mov	r4, r0
 8003488:	f7ff fff0 	bl	800346c <__sfp_lock_acquire>
 800348c:	6a23      	ldr	r3, [r4, #32]
 800348e:	b11b      	cbz	r3, 8003498 <__sinit+0x14>
 8003490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003494:	f7ff bff0 	b.w	8003478 <__sfp_lock_release>
 8003498:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <__sinit+0x28>)
 800349a:	6223      	str	r3, [r4, #32]
 800349c:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <__sinit+0x2c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f5      	bne.n	8003490 <__sinit+0xc>
 80034a4:	f7ff ffc4 	bl	8003430 <global_stdio_init.part.0>
 80034a8:	e7f2      	b.n	8003490 <__sinit+0xc>
 80034aa:	bf00      	nop
 80034ac:	080033f1 	.word	0x080033f1
 80034b0:	200002b8 	.word	0x200002b8

080034b4 <_fwalk_sglue>:
 80034b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034b8:	4607      	mov	r7, r0
 80034ba:	4688      	mov	r8, r1
 80034bc:	4614      	mov	r4, r2
 80034be:	2600      	movs	r6, #0
 80034c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034c4:	f1b9 0901 	subs.w	r9, r9, #1
 80034c8:	d505      	bpl.n	80034d6 <_fwalk_sglue+0x22>
 80034ca:	6824      	ldr	r4, [r4, #0]
 80034cc:	2c00      	cmp	r4, #0
 80034ce:	d1f7      	bne.n	80034c0 <_fwalk_sglue+0xc>
 80034d0:	4630      	mov	r0, r6
 80034d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034d6:	89ab      	ldrh	r3, [r5, #12]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d907      	bls.n	80034ec <_fwalk_sglue+0x38>
 80034dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034e0:	3301      	adds	r3, #1
 80034e2:	d003      	beq.n	80034ec <_fwalk_sglue+0x38>
 80034e4:	4629      	mov	r1, r5
 80034e6:	4638      	mov	r0, r7
 80034e8:	47c0      	blx	r8
 80034ea:	4306      	orrs	r6, r0
 80034ec:	3568      	adds	r5, #104	@ 0x68
 80034ee:	e7e9      	b.n	80034c4 <_fwalk_sglue+0x10>

080034f0 <iprintf>:
 80034f0:	b40f      	push	{r0, r1, r2, r3}
 80034f2:	b507      	push	{r0, r1, r2, lr}
 80034f4:	4906      	ldr	r1, [pc, #24]	@ (8003510 <iprintf+0x20>)
 80034f6:	ab04      	add	r3, sp, #16
 80034f8:	6808      	ldr	r0, [r1, #0]
 80034fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80034fe:	6881      	ldr	r1, [r0, #8]
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	f000 fadb 	bl	8003abc <_vfiprintf_r>
 8003506:	b003      	add	sp, #12
 8003508:	f85d eb04 	ldr.w	lr, [sp], #4
 800350c:	b004      	add	sp, #16
 800350e:	4770      	bx	lr
 8003510:	20000018 	.word	0x20000018

08003514 <_puts_r>:
 8003514:	6a03      	ldr	r3, [r0, #32]
 8003516:	b570      	push	{r4, r5, r6, lr}
 8003518:	6884      	ldr	r4, [r0, #8]
 800351a:	4605      	mov	r5, r0
 800351c:	460e      	mov	r6, r1
 800351e:	b90b      	cbnz	r3, 8003524 <_puts_r+0x10>
 8003520:	f7ff ffb0 	bl	8003484 <__sinit>
 8003524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003526:	07db      	lsls	r3, r3, #31
 8003528:	d405      	bmi.n	8003536 <_puts_r+0x22>
 800352a:	89a3      	ldrh	r3, [r4, #12]
 800352c:	0598      	lsls	r0, r3, #22
 800352e:	d402      	bmi.n	8003536 <_puts_r+0x22>
 8003530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003532:	f000 f99e 	bl	8003872 <__retarget_lock_acquire_recursive>
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	0719      	lsls	r1, r3, #28
 800353a:	d502      	bpl.n	8003542 <_puts_r+0x2e>
 800353c:	6923      	ldr	r3, [r4, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d135      	bne.n	80035ae <_puts_r+0x9a>
 8003542:	4621      	mov	r1, r4
 8003544:	4628      	mov	r0, r5
 8003546:	f000 f8c5 	bl	80036d4 <__swsetup_r>
 800354a:	b380      	cbz	r0, 80035ae <_puts_r+0x9a>
 800354c:	f04f 35ff 	mov.w	r5, #4294967295
 8003550:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003552:	07da      	lsls	r2, r3, #31
 8003554:	d405      	bmi.n	8003562 <_puts_r+0x4e>
 8003556:	89a3      	ldrh	r3, [r4, #12]
 8003558:	059b      	lsls	r3, r3, #22
 800355a:	d402      	bmi.n	8003562 <_puts_r+0x4e>
 800355c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800355e:	f000 f989 	bl	8003874 <__retarget_lock_release_recursive>
 8003562:	4628      	mov	r0, r5
 8003564:	bd70      	pop	{r4, r5, r6, pc}
 8003566:	2b00      	cmp	r3, #0
 8003568:	da04      	bge.n	8003574 <_puts_r+0x60>
 800356a:	69a2      	ldr	r2, [r4, #24]
 800356c:	429a      	cmp	r2, r3
 800356e:	dc17      	bgt.n	80035a0 <_puts_r+0x8c>
 8003570:	290a      	cmp	r1, #10
 8003572:	d015      	beq.n	80035a0 <_puts_r+0x8c>
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	6022      	str	r2, [r4, #0]
 800357a:	7019      	strb	r1, [r3, #0]
 800357c:	68a3      	ldr	r3, [r4, #8]
 800357e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003582:	3b01      	subs	r3, #1
 8003584:	60a3      	str	r3, [r4, #8]
 8003586:	2900      	cmp	r1, #0
 8003588:	d1ed      	bne.n	8003566 <_puts_r+0x52>
 800358a:	2b00      	cmp	r3, #0
 800358c:	da11      	bge.n	80035b2 <_puts_r+0x9e>
 800358e:	4622      	mov	r2, r4
 8003590:	210a      	movs	r1, #10
 8003592:	4628      	mov	r0, r5
 8003594:	f000 f85f 	bl	8003656 <__swbuf_r>
 8003598:	3001      	adds	r0, #1
 800359a:	d0d7      	beq.n	800354c <_puts_r+0x38>
 800359c:	250a      	movs	r5, #10
 800359e:	e7d7      	b.n	8003550 <_puts_r+0x3c>
 80035a0:	4622      	mov	r2, r4
 80035a2:	4628      	mov	r0, r5
 80035a4:	f000 f857 	bl	8003656 <__swbuf_r>
 80035a8:	3001      	adds	r0, #1
 80035aa:	d1e7      	bne.n	800357c <_puts_r+0x68>
 80035ac:	e7ce      	b.n	800354c <_puts_r+0x38>
 80035ae:	3e01      	subs	r6, #1
 80035b0:	e7e4      	b.n	800357c <_puts_r+0x68>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	6022      	str	r2, [r4, #0]
 80035b8:	220a      	movs	r2, #10
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	e7ee      	b.n	800359c <_puts_r+0x88>
	...

080035c0 <puts>:
 80035c0:	4b02      	ldr	r3, [pc, #8]	@ (80035cc <puts+0xc>)
 80035c2:	4601      	mov	r1, r0
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	f7ff bfa5 	b.w	8003514 <_puts_r>
 80035ca:	bf00      	nop
 80035cc:	20000018 	.word	0x20000018

080035d0 <__sread>:
 80035d0:	b510      	push	{r4, lr}
 80035d2:	460c      	mov	r4, r1
 80035d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d8:	f000 f8fc 	bl	80037d4 <_read_r>
 80035dc:	2800      	cmp	r0, #0
 80035de:	bfab      	itete	ge
 80035e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80035e2:	89a3      	ldrhlt	r3, [r4, #12]
 80035e4:	181b      	addge	r3, r3, r0
 80035e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80035ea:	bfac      	ite	ge
 80035ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80035ee:	81a3      	strhlt	r3, [r4, #12]
 80035f0:	bd10      	pop	{r4, pc}

080035f2 <__swrite>:
 80035f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035f6:	461f      	mov	r7, r3
 80035f8:	898b      	ldrh	r3, [r1, #12]
 80035fa:	05db      	lsls	r3, r3, #23
 80035fc:	4605      	mov	r5, r0
 80035fe:	460c      	mov	r4, r1
 8003600:	4616      	mov	r6, r2
 8003602:	d505      	bpl.n	8003610 <__swrite+0x1e>
 8003604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003608:	2302      	movs	r3, #2
 800360a:	2200      	movs	r2, #0
 800360c:	f000 f8d0 	bl	80037b0 <_lseek_r>
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003616:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800361a:	81a3      	strh	r3, [r4, #12]
 800361c:	4632      	mov	r2, r6
 800361e:	463b      	mov	r3, r7
 8003620:	4628      	mov	r0, r5
 8003622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003626:	f000 b8e7 	b.w	80037f8 <_write_r>

0800362a <__sseek>:
 800362a:	b510      	push	{r4, lr}
 800362c:	460c      	mov	r4, r1
 800362e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003632:	f000 f8bd 	bl	80037b0 <_lseek_r>
 8003636:	1c43      	adds	r3, r0, #1
 8003638:	89a3      	ldrh	r3, [r4, #12]
 800363a:	bf15      	itete	ne
 800363c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800363e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003642:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003646:	81a3      	strheq	r3, [r4, #12]
 8003648:	bf18      	it	ne
 800364a:	81a3      	strhne	r3, [r4, #12]
 800364c:	bd10      	pop	{r4, pc}

0800364e <__sclose>:
 800364e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003652:	f000 b89d 	b.w	8003790 <_close_r>

08003656 <__swbuf_r>:
 8003656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003658:	460e      	mov	r6, r1
 800365a:	4614      	mov	r4, r2
 800365c:	4605      	mov	r5, r0
 800365e:	b118      	cbz	r0, 8003668 <__swbuf_r+0x12>
 8003660:	6a03      	ldr	r3, [r0, #32]
 8003662:	b90b      	cbnz	r3, 8003668 <__swbuf_r+0x12>
 8003664:	f7ff ff0e 	bl	8003484 <__sinit>
 8003668:	69a3      	ldr	r3, [r4, #24]
 800366a:	60a3      	str	r3, [r4, #8]
 800366c:	89a3      	ldrh	r3, [r4, #12]
 800366e:	071a      	lsls	r2, r3, #28
 8003670:	d501      	bpl.n	8003676 <__swbuf_r+0x20>
 8003672:	6923      	ldr	r3, [r4, #16]
 8003674:	b943      	cbnz	r3, 8003688 <__swbuf_r+0x32>
 8003676:	4621      	mov	r1, r4
 8003678:	4628      	mov	r0, r5
 800367a:	f000 f82b 	bl	80036d4 <__swsetup_r>
 800367e:	b118      	cbz	r0, 8003688 <__swbuf_r+0x32>
 8003680:	f04f 37ff 	mov.w	r7, #4294967295
 8003684:	4638      	mov	r0, r7
 8003686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	6922      	ldr	r2, [r4, #16]
 800368c:	1a98      	subs	r0, r3, r2
 800368e:	6963      	ldr	r3, [r4, #20]
 8003690:	b2f6      	uxtb	r6, r6
 8003692:	4283      	cmp	r3, r0
 8003694:	4637      	mov	r7, r6
 8003696:	dc05      	bgt.n	80036a4 <__swbuf_r+0x4e>
 8003698:	4621      	mov	r1, r4
 800369a:	4628      	mov	r0, r5
 800369c:	f000 fd38 	bl	8004110 <_fflush_r>
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d1ed      	bne.n	8003680 <__swbuf_r+0x2a>
 80036a4:	68a3      	ldr	r3, [r4, #8]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	60a3      	str	r3, [r4, #8]
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	6022      	str	r2, [r4, #0]
 80036b0:	701e      	strb	r6, [r3, #0]
 80036b2:	6962      	ldr	r2, [r4, #20]
 80036b4:	1c43      	adds	r3, r0, #1
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d004      	beq.n	80036c4 <__swbuf_r+0x6e>
 80036ba:	89a3      	ldrh	r3, [r4, #12]
 80036bc:	07db      	lsls	r3, r3, #31
 80036be:	d5e1      	bpl.n	8003684 <__swbuf_r+0x2e>
 80036c0:	2e0a      	cmp	r6, #10
 80036c2:	d1df      	bne.n	8003684 <__swbuf_r+0x2e>
 80036c4:	4621      	mov	r1, r4
 80036c6:	4628      	mov	r0, r5
 80036c8:	f000 fd22 	bl	8004110 <_fflush_r>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d0d9      	beq.n	8003684 <__swbuf_r+0x2e>
 80036d0:	e7d6      	b.n	8003680 <__swbuf_r+0x2a>
	...

080036d4 <__swsetup_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4b29      	ldr	r3, [pc, #164]	@ (800377c <__swsetup_r+0xa8>)
 80036d8:	4605      	mov	r5, r0
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	460c      	mov	r4, r1
 80036de:	b118      	cbz	r0, 80036e8 <__swsetup_r+0x14>
 80036e0:	6a03      	ldr	r3, [r0, #32]
 80036e2:	b90b      	cbnz	r3, 80036e8 <__swsetup_r+0x14>
 80036e4:	f7ff fece 	bl	8003484 <__sinit>
 80036e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ec:	0719      	lsls	r1, r3, #28
 80036ee:	d422      	bmi.n	8003736 <__swsetup_r+0x62>
 80036f0:	06da      	lsls	r2, r3, #27
 80036f2:	d407      	bmi.n	8003704 <__swsetup_r+0x30>
 80036f4:	2209      	movs	r2, #9
 80036f6:	602a      	str	r2, [r5, #0]
 80036f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036fc:	81a3      	strh	r3, [r4, #12]
 80036fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003702:	e033      	b.n	800376c <__swsetup_r+0x98>
 8003704:	0758      	lsls	r0, r3, #29
 8003706:	d512      	bpl.n	800372e <__swsetup_r+0x5a>
 8003708:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800370a:	b141      	cbz	r1, 800371e <__swsetup_r+0x4a>
 800370c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003710:	4299      	cmp	r1, r3
 8003712:	d002      	beq.n	800371a <__swsetup_r+0x46>
 8003714:	4628      	mov	r0, r5
 8003716:	f000 f8af 	bl	8003878 <_free_r>
 800371a:	2300      	movs	r3, #0
 800371c:	6363      	str	r3, [r4, #52]	@ 0x34
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003724:	81a3      	strh	r3, [r4, #12]
 8003726:	2300      	movs	r3, #0
 8003728:	6063      	str	r3, [r4, #4]
 800372a:	6923      	ldr	r3, [r4, #16]
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	89a3      	ldrh	r3, [r4, #12]
 8003730:	f043 0308 	orr.w	r3, r3, #8
 8003734:	81a3      	strh	r3, [r4, #12]
 8003736:	6923      	ldr	r3, [r4, #16]
 8003738:	b94b      	cbnz	r3, 800374e <__swsetup_r+0x7a>
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003744:	d003      	beq.n	800374e <__swsetup_r+0x7a>
 8003746:	4621      	mov	r1, r4
 8003748:	4628      	mov	r0, r5
 800374a:	f000 fd2f 	bl	80041ac <__smakebuf_r>
 800374e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003752:	f013 0201 	ands.w	r2, r3, #1
 8003756:	d00a      	beq.n	800376e <__swsetup_r+0x9a>
 8003758:	2200      	movs	r2, #0
 800375a:	60a2      	str	r2, [r4, #8]
 800375c:	6962      	ldr	r2, [r4, #20]
 800375e:	4252      	negs	r2, r2
 8003760:	61a2      	str	r2, [r4, #24]
 8003762:	6922      	ldr	r2, [r4, #16]
 8003764:	b942      	cbnz	r2, 8003778 <__swsetup_r+0xa4>
 8003766:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800376a:	d1c5      	bne.n	80036f8 <__swsetup_r+0x24>
 800376c:	bd38      	pop	{r3, r4, r5, pc}
 800376e:	0799      	lsls	r1, r3, #30
 8003770:	bf58      	it	pl
 8003772:	6962      	ldrpl	r2, [r4, #20]
 8003774:	60a2      	str	r2, [r4, #8]
 8003776:	e7f4      	b.n	8003762 <__swsetup_r+0x8e>
 8003778:	2000      	movs	r0, #0
 800377a:	e7f7      	b.n	800376c <__swsetup_r+0x98>
 800377c:	20000018 	.word	0x20000018

08003780 <memset>:
 8003780:	4402      	add	r2, r0
 8003782:	4603      	mov	r3, r0
 8003784:	4293      	cmp	r3, r2
 8003786:	d100      	bne.n	800378a <memset+0xa>
 8003788:	4770      	bx	lr
 800378a:	f803 1b01 	strb.w	r1, [r3], #1
 800378e:	e7f9      	b.n	8003784 <memset+0x4>

08003790 <_close_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	4d06      	ldr	r5, [pc, #24]	@ (80037ac <_close_r+0x1c>)
 8003794:	2300      	movs	r3, #0
 8003796:	4604      	mov	r4, r0
 8003798:	4608      	mov	r0, r1
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	f7fd fa7c 	bl	8000c98 <_close>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_close_r+0x1a>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_close_r+0x1a>
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	200002bc 	.word	0x200002bc

080037b0 <_lseek_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	4d07      	ldr	r5, [pc, #28]	@ (80037d0 <_lseek_r+0x20>)
 80037b4:	4604      	mov	r4, r0
 80037b6:	4608      	mov	r0, r1
 80037b8:	4611      	mov	r1, r2
 80037ba:	2200      	movs	r2, #0
 80037bc:	602a      	str	r2, [r5, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	f7fd fa91 	bl	8000ce6 <_lseek>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	d102      	bne.n	80037ce <_lseek_r+0x1e>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	b103      	cbz	r3, 80037ce <_lseek_r+0x1e>
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	200002bc 	.word	0x200002bc

080037d4 <_read_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4d07      	ldr	r5, [pc, #28]	@ (80037f4 <_read_r+0x20>)
 80037d8:	4604      	mov	r4, r0
 80037da:	4608      	mov	r0, r1
 80037dc:	4611      	mov	r1, r2
 80037de:	2200      	movs	r2, #0
 80037e0:	602a      	str	r2, [r5, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f7fd fa3b 	bl	8000c5e <_read>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d102      	bne.n	80037f2 <_read_r+0x1e>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	b103      	cbz	r3, 80037f2 <_read_r+0x1e>
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
 80037f4:	200002bc 	.word	0x200002bc

080037f8 <_write_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4d07      	ldr	r5, [pc, #28]	@ (8003818 <_write_r+0x20>)
 80037fc:	4604      	mov	r4, r0
 80037fe:	4608      	mov	r0, r1
 8003800:	4611      	mov	r1, r2
 8003802:	2200      	movs	r2, #0
 8003804:	602a      	str	r2, [r5, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	f7fd f89a 	bl	8000940 <_write>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	d102      	bne.n	8003816 <_write_r+0x1e>
 8003810:	682b      	ldr	r3, [r5, #0]
 8003812:	b103      	cbz	r3, 8003816 <_write_r+0x1e>
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	200002bc 	.word	0x200002bc

0800381c <__errno>:
 800381c:	4b01      	ldr	r3, [pc, #4]	@ (8003824 <__errno+0x8>)
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000018 	.word	0x20000018

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	4d0d      	ldr	r5, [pc, #52]	@ (8003860 <__libc_init_array+0x38>)
 800382c:	4c0d      	ldr	r4, [pc, #52]	@ (8003864 <__libc_init_array+0x3c>)
 800382e:	1b64      	subs	r4, r4, r5
 8003830:	10a4      	asrs	r4, r4, #2
 8003832:	2600      	movs	r6, #0
 8003834:	42a6      	cmp	r6, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	4d0b      	ldr	r5, [pc, #44]	@ (8003868 <__libc_init_array+0x40>)
 800383a:	4c0c      	ldr	r4, [pc, #48]	@ (800386c <__libc_init_array+0x44>)
 800383c:	f000 fd24 	bl	8004288 <_init>
 8003840:	1b64      	subs	r4, r4, r5
 8003842:	10a4      	asrs	r4, r4, #2
 8003844:	2600      	movs	r6, #0
 8003846:	42a6      	cmp	r6, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003850:	4798      	blx	r3
 8003852:	3601      	adds	r6, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	f855 3b04 	ldr.w	r3, [r5], #4
 800385a:	4798      	blx	r3
 800385c:	3601      	adds	r6, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	0800431c 	.word	0x0800431c
 8003864:	0800431c 	.word	0x0800431c
 8003868:	0800431c 	.word	0x0800431c
 800386c:	08004320 	.word	0x08004320

08003870 <__retarget_lock_init_recursive>:
 8003870:	4770      	bx	lr

08003872 <__retarget_lock_acquire_recursive>:
 8003872:	4770      	bx	lr

08003874 <__retarget_lock_release_recursive>:
 8003874:	4770      	bx	lr
	...

08003878 <_free_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4605      	mov	r5, r0
 800387c:	2900      	cmp	r1, #0
 800387e:	d041      	beq.n	8003904 <_free_r+0x8c>
 8003880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003884:	1f0c      	subs	r4, r1, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfb8      	it	lt
 800388a:	18e4      	addlt	r4, r4, r3
 800388c:	f000 f8e0 	bl	8003a50 <__malloc_lock>
 8003890:	4a1d      	ldr	r2, [pc, #116]	@ (8003908 <_free_r+0x90>)
 8003892:	6813      	ldr	r3, [r2, #0]
 8003894:	b933      	cbnz	r3, 80038a4 <_free_r+0x2c>
 8003896:	6063      	str	r3, [r4, #4]
 8003898:	6014      	str	r4, [r2, #0]
 800389a:	4628      	mov	r0, r5
 800389c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a0:	f000 b8dc 	b.w	8003a5c <__malloc_unlock>
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	d908      	bls.n	80038ba <_free_r+0x42>
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	1821      	adds	r1, r4, r0
 80038ac:	428b      	cmp	r3, r1
 80038ae:	bf01      	itttt	eq
 80038b0:	6819      	ldreq	r1, [r3, #0]
 80038b2:	685b      	ldreq	r3, [r3, #4]
 80038b4:	1809      	addeq	r1, r1, r0
 80038b6:	6021      	streq	r1, [r4, #0]
 80038b8:	e7ed      	b.n	8003896 <_free_r+0x1e>
 80038ba:	461a      	mov	r2, r3
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	b10b      	cbz	r3, 80038c4 <_free_r+0x4c>
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d9fa      	bls.n	80038ba <_free_r+0x42>
 80038c4:	6811      	ldr	r1, [r2, #0]
 80038c6:	1850      	adds	r0, r2, r1
 80038c8:	42a0      	cmp	r0, r4
 80038ca:	d10b      	bne.n	80038e4 <_free_r+0x6c>
 80038cc:	6820      	ldr	r0, [r4, #0]
 80038ce:	4401      	add	r1, r0
 80038d0:	1850      	adds	r0, r2, r1
 80038d2:	4283      	cmp	r3, r0
 80038d4:	6011      	str	r1, [r2, #0]
 80038d6:	d1e0      	bne.n	800389a <_free_r+0x22>
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	6053      	str	r3, [r2, #4]
 80038de:	4408      	add	r0, r1
 80038e0:	6010      	str	r0, [r2, #0]
 80038e2:	e7da      	b.n	800389a <_free_r+0x22>
 80038e4:	d902      	bls.n	80038ec <_free_r+0x74>
 80038e6:	230c      	movs	r3, #12
 80038e8:	602b      	str	r3, [r5, #0]
 80038ea:	e7d6      	b.n	800389a <_free_r+0x22>
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	1821      	adds	r1, r4, r0
 80038f0:	428b      	cmp	r3, r1
 80038f2:	bf04      	itt	eq
 80038f4:	6819      	ldreq	r1, [r3, #0]
 80038f6:	685b      	ldreq	r3, [r3, #4]
 80038f8:	6063      	str	r3, [r4, #4]
 80038fa:	bf04      	itt	eq
 80038fc:	1809      	addeq	r1, r1, r0
 80038fe:	6021      	streq	r1, [r4, #0]
 8003900:	6054      	str	r4, [r2, #4]
 8003902:	e7ca      	b.n	800389a <_free_r+0x22>
 8003904:	bd38      	pop	{r3, r4, r5, pc}
 8003906:	bf00      	nop
 8003908:	200002c8 	.word	0x200002c8

0800390c <sbrk_aligned>:
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	4e0f      	ldr	r6, [pc, #60]	@ (800394c <sbrk_aligned+0x40>)
 8003910:	460c      	mov	r4, r1
 8003912:	6831      	ldr	r1, [r6, #0]
 8003914:	4605      	mov	r5, r0
 8003916:	b911      	cbnz	r1, 800391e <sbrk_aligned+0x12>
 8003918:	f000 fca6 	bl	8004268 <_sbrk_r>
 800391c:	6030      	str	r0, [r6, #0]
 800391e:	4621      	mov	r1, r4
 8003920:	4628      	mov	r0, r5
 8003922:	f000 fca1 	bl	8004268 <_sbrk_r>
 8003926:	1c43      	adds	r3, r0, #1
 8003928:	d103      	bne.n	8003932 <sbrk_aligned+0x26>
 800392a:	f04f 34ff 	mov.w	r4, #4294967295
 800392e:	4620      	mov	r0, r4
 8003930:	bd70      	pop	{r4, r5, r6, pc}
 8003932:	1cc4      	adds	r4, r0, #3
 8003934:	f024 0403 	bic.w	r4, r4, #3
 8003938:	42a0      	cmp	r0, r4
 800393a:	d0f8      	beq.n	800392e <sbrk_aligned+0x22>
 800393c:	1a21      	subs	r1, r4, r0
 800393e:	4628      	mov	r0, r5
 8003940:	f000 fc92 	bl	8004268 <_sbrk_r>
 8003944:	3001      	adds	r0, #1
 8003946:	d1f2      	bne.n	800392e <sbrk_aligned+0x22>
 8003948:	e7ef      	b.n	800392a <sbrk_aligned+0x1e>
 800394a:	bf00      	nop
 800394c:	200002c4 	.word	0x200002c4

08003950 <_malloc_r>:
 8003950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003954:	1ccd      	adds	r5, r1, #3
 8003956:	f025 0503 	bic.w	r5, r5, #3
 800395a:	3508      	adds	r5, #8
 800395c:	2d0c      	cmp	r5, #12
 800395e:	bf38      	it	cc
 8003960:	250c      	movcc	r5, #12
 8003962:	2d00      	cmp	r5, #0
 8003964:	4606      	mov	r6, r0
 8003966:	db01      	blt.n	800396c <_malloc_r+0x1c>
 8003968:	42a9      	cmp	r1, r5
 800396a:	d904      	bls.n	8003976 <_malloc_r+0x26>
 800396c:	230c      	movs	r3, #12
 800396e:	6033      	str	r3, [r6, #0]
 8003970:	2000      	movs	r0, #0
 8003972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a4c <_malloc_r+0xfc>
 800397a:	f000 f869 	bl	8003a50 <__malloc_lock>
 800397e:	f8d8 3000 	ldr.w	r3, [r8]
 8003982:	461c      	mov	r4, r3
 8003984:	bb44      	cbnz	r4, 80039d8 <_malloc_r+0x88>
 8003986:	4629      	mov	r1, r5
 8003988:	4630      	mov	r0, r6
 800398a:	f7ff ffbf 	bl	800390c <sbrk_aligned>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	4604      	mov	r4, r0
 8003992:	d158      	bne.n	8003a46 <_malloc_r+0xf6>
 8003994:	f8d8 4000 	ldr.w	r4, [r8]
 8003998:	4627      	mov	r7, r4
 800399a:	2f00      	cmp	r7, #0
 800399c:	d143      	bne.n	8003a26 <_malloc_r+0xd6>
 800399e:	2c00      	cmp	r4, #0
 80039a0:	d04b      	beq.n	8003a3a <_malloc_r+0xea>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	4639      	mov	r1, r7
 80039a6:	4630      	mov	r0, r6
 80039a8:	eb04 0903 	add.w	r9, r4, r3
 80039ac:	f000 fc5c 	bl	8004268 <_sbrk_r>
 80039b0:	4581      	cmp	r9, r0
 80039b2:	d142      	bne.n	8003a3a <_malloc_r+0xea>
 80039b4:	6821      	ldr	r1, [r4, #0]
 80039b6:	1a6d      	subs	r5, r5, r1
 80039b8:	4629      	mov	r1, r5
 80039ba:	4630      	mov	r0, r6
 80039bc:	f7ff ffa6 	bl	800390c <sbrk_aligned>
 80039c0:	3001      	adds	r0, #1
 80039c2:	d03a      	beq.n	8003a3a <_malloc_r+0xea>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	442b      	add	r3, r5
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	f8d8 3000 	ldr.w	r3, [r8]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	bb62      	cbnz	r2, 8003a2c <_malloc_r+0xdc>
 80039d2:	f8c8 7000 	str.w	r7, [r8]
 80039d6:	e00f      	b.n	80039f8 <_malloc_r+0xa8>
 80039d8:	6822      	ldr	r2, [r4, #0]
 80039da:	1b52      	subs	r2, r2, r5
 80039dc:	d420      	bmi.n	8003a20 <_malloc_r+0xd0>
 80039de:	2a0b      	cmp	r2, #11
 80039e0:	d917      	bls.n	8003a12 <_malloc_r+0xc2>
 80039e2:	1961      	adds	r1, r4, r5
 80039e4:	42a3      	cmp	r3, r4
 80039e6:	6025      	str	r5, [r4, #0]
 80039e8:	bf18      	it	ne
 80039ea:	6059      	strne	r1, [r3, #4]
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	bf08      	it	eq
 80039f0:	f8c8 1000 	streq.w	r1, [r8]
 80039f4:	5162      	str	r2, [r4, r5]
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	4630      	mov	r0, r6
 80039fa:	f000 f82f 	bl	8003a5c <__malloc_unlock>
 80039fe:	f104 000b 	add.w	r0, r4, #11
 8003a02:	1d23      	adds	r3, r4, #4
 8003a04:	f020 0007 	bic.w	r0, r0, #7
 8003a08:	1ac2      	subs	r2, r0, r3
 8003a0a:	bf1c      	itt	ne
 8003a0c:	1a1b      	subne	r3, r3, r0
 8003a0e:	50a3      	strne	r3, [r4, r2]
 8003a10:	e7af      	b.n	8003972 <_malloc_r+0x22>
 8003a12:	6862      	ldr	r2, [r4, #4]
 8003a14:	42a3      	cmp	r3, r4
 8003a16:	bf0c      	ite	eq
 8003a18:	f8c8 2000 	streq.w	r2, [r8]
 8003a1c:	605a      	strne	r2, [r3, #4]
 8003a1e:	e7eb      	b.n	80039f8 <_malloc_r+0xa8>
 8003a20:	4623      	mov	r3, r4
 8003a22:	6864      	ldr	r4, [r4, #4]
 8003a24:	e7ae      	b.n	8003984 <_malloc_r+0x34>
 8003a26:	463c      	mov	r4, r7
 8003a28:	687f      	ldr	r7, [r7, #4]
 8003a2a:	e7b6      	b.n	800399a <_malloc_r+0x4a>
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	42a3      	cmp	r3, r4
 8003a32:	d1fb      	bne.n	8003a2c <_malloc_r+0xdc>
 8003a34:	2300      	movs	r3, #0
 8003a36:	6053      	str	r3, [r2, #4]
 8003a38:	e7de      	b.n	80039f8 <_malloc_r+0xa8>
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	6033      	str	r3, [r6, #0]
 8003a3e:	4630      	mov	r0, r6
 8003a40:	f000 f80c 	bl	8003a5c <__malloc_unlock>
 8003a44:	e794      	b.n	8003970 <_malloc_r+0x20>
 8003a46:	6005      	str	r5, [r0, #0]
 8003a48:	e7d6      	b.n	80039f8 <_malloc_r+0xa8>
 8003a4a:	bf00      	nop
 8003a4c:	200002c8 	.word	0x200002c8

08003a50 <__malloc_lock>:
 8003a50:	4801      	ldr	r0, [pc, #4]	@ (8003a58 <__malloc_lock+0x8>)
 8003a52:	f7ff bf0e 	b.w	8003872 <__retarget_lock_acquire_recursive>
 8003a56:	bf00      	nop
 8003a58:	200002c0 	.word	0x200002c0

08003a5c <__malloc_unlock>:
 8003a5c:	4801      	ldr	r0, [pc, #4]	@ (8003a64 <__malloc_unlock+0x8>)
 8003a5e:	f7ff bf09 	b.w	8003874 <__retarget_lock_release_recursive>
 8003a62:	bf00      	nop
 8003a64:	200002c0 	.word	0x200002c0

08003a68 <__sfputc_r>:
 8003a68:	6893      	ldr	r3, [r2, #8]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	b410      	push	{r4}
 8003a70:	6093      	str	r3, [r2, #8]
 8003a72:	da08      	bge.n	8003a86 <__sfputc_r+0x1e>
 8003a74:	6994      	ldr	r4, [r2, #24]
 8003a76:	42a3      	cmp	r3, r4
 8003a78:	db01      	blt.n	8003a7e <__sfputc_r+0x16>
 8003a7a:	290a      	cmp	r1, #10
 8003a7c:	d103      	bne.n	8003a86 <__sfputc_r+0x1e>
 8003a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a82:	f7ff bde8 	b.w	8003656 <__swbuf_r>
 8003a86:	6813      	ldr	r3, [r2, #0]
 8003a88:	1c58      	adds	r0, r3, #1
 8003a8a:	6010      	str	r0, [r2, #0]
 8003a8c:	7019      	strb	r1, [r3, #0]
 8003a8e:	4608      	mov	r0, r1
 8003a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <__sfputs_r>:
 8003a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a98:	4606      	mov	r6, r0
 8003a9a:	460f      	mov	r7, r1
 8003a9c:	4614      	mov	r4, r2
 8003a9e:	18d5      	adds	r5, r2, r3
 8003aa0:	42ac      	cmp	r4, r5
 8003aa2:	d101      	bne.n	8003aa8 <__sfputs_r+0x12>
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	e007      	b.n	8003ab8 <__sfputs_r+0x22>
 8003aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aac:	463a      	mov	r2, r7
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f7ff ffda 	bl	8003a68 <__sfputc_r>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d1f3      	bne.n	8003aa0 <__sfputs_r+0xa>
 8003ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003abc <_vfiprintf_r>:
 8003abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac0:	460d      	mov	r5, r1
 8003ac2:	b09d      	sub	sp, #116	@ 0x74
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	4698      	mov	r8, r3
 8003ac8:	4606      	mov	r6, r0
 8003aca:	b118      	cbz	r0, 8003ad4 <_vfiprintf_r+0x18>
 8003acc:	6a03      	ldr	r3, [r0, #32]
 8003ace:	b90b      	cbnz	r3, 8003ad4 <_vfiprintf_r+0x18>
 8003ad0:	f7ff fcd8 	bl	8003484 <__sinit>
 8003ad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ad6:	07d9      	lsls	r1, r3, #31
 8003ad8:	d405      	bmi.n	8003ae6 <_vfiprintf_r+0x2a>
 8003ada:	89ab      	ldrh	r3, [r5, #12]
 8003adc:	059a      	lsls	r2, r3, #22
 8003ade:	d402      	bmi.n	8003ae6 <_vfiprintf_r+0x2a>
 8003ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ae2:	f7ff fec6 	bl	8003872 <__retarget_lock_acquire_recursive>
 8003ae6:	89ab      	ldrh	r3, [r5, #12]
 8003ae8:	071b      	lsls	r3, r3, #28
 8003aea:	d501      	bpl.n	8003af0 <_vfiprintf_r+0x34>
 8003aec:	692b      	ldr	r3, [r5, #16]
 8003aee:	b99b      	cbnz	r3, 8003b18 <_vfiprintf_r+0x5c>
 8003af0:	4629      	mov	r1, r5
 8003af2:	4630      	mov	r0, r6
 8003af4:	f7ff fdee 	bl	80036d4 <__swsetup_r>
 8003af8:	b170      	cbz	r0, 8003b18 <_vfiprintf_r+0x5c>
 8003afa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003afc:	07dc      	lsls	r4, r3, #31
 8003afe:	d504      	bpl.n	8003b0a <_vfiprintf_r+0x4e>
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295
 8003b04:	b01d      	add	sp, #116	@ 0x74
 8003b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b0a:	89ab      	ldrh	r3, [r5, #12]
 8003b0c:	0598      	lsls	r0, r3, #22
 8003b0e:	d4f7      	bmi.n	8003b00 <_vfiprintf_r+0x44>
 8003b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b12:	f7ff feaf 	bl	8003874 <__retarget_lock_release_recursive>
 8003b16:	e7f3      	b.n	8003b00 <_vfiprintf_r+0x44>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b26:	2330      	movs	r3, #48	@ 0x30
 8003b28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003cd8 <_vfiprintf_r+0x21c>
 8003b2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b30:	f04f 0901 	mov.w	r9, #1
 8003b34:	4623      	mov	r3, r4
 8003b36:	469a      	mov	sl, r3
 8003b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b3c:	b10a      	cbz	r2, 8003b42 <_vfiprintf_r+0x86>
 8003b3e:	2a25      	cmp	r2, #37	@ 0x25
 8003b40:	d1f9      	bne.n	8003b36 <_vfiprintf_r+0x7a>
 8003b42:	ebba 0b04 	subs.w	fp, sl, r4
 8003b46:	d00b      	beq.n	8003b60 <_vfiprintf_r+0xa4>
 8003b48:	465b      	mov	r3, fp
 8003b4a:	4622      	mov	r2, r4
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f7ff ffa1 	bl	8003a96 <__sfputs_r>
 8003b54:	3001      	adds	r0, #1
 8003b56:	f000 80a7 	beq.w	8003ca8 <_vfiprintf_r+0x1ec>
 8003b5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b5c:	445a      	add	r2, fp
 8003b5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b60:	f89a 3000 	ldrb.w	r3, [sl]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 809f 	beq.w	8003ca8 <_vfiprintf_r+0x1ec>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b74:	f10a 0a01 	add.w	sl, sl, #1
 8003b78:	9304      	str	r3, [sp, #16]
 8003b7a:	9307      	str	r3, [sp, #28]
 8003b7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b80:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b82:	4654      	mov	r4, sl
 8003b84:	2205      	movs	r2, #5
 8003b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b8a:	4853      	ldr	r0, [pc, #332]	@ (8003cd8 <_vfiprintf_r+0x21c>)
 8003b8c:	f7fc fb40 	bl	8000210 <memchr>
 8003b90:	9a04      	ldr	r2, [sp, #16]
 8003b92:	b9d8      	cbnz	r0, 8003bcc <_vfiprintf_r+0x110>
 8003b94:	06d1      	lsls	r1, r2, #27
 8003b96:	bf44      	itt	mi
 8003b98:	2320      	movmi	r3, #32
 8003b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b9e:	0713      	lsls	r3, r2, #28
 8003ba0:	bf44      	itt	mi
 8003ba2:	232b      	movmi	r3, #43	@ 0x2b
 8003ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8003bac:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bae:	d015      	beq.n	8003bdc <_vfiprintf_r+0x120>
 8003bb0:	9a07      	ldr	r2, [sp, #28]
 8003bb2:	4654      	mov	r4, sl
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	f04f 0c0a 	mov.w	ip, #10
 8003bba:	4621      	mov	r1, r4
 8003bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bc0:	3b30      	subs	r3, #48	@ 0x30
 8003bc2:	2b09      	cmp	r3, #9
 8003bc4:	d94b      	bls.n	8003c5e <_vfiprintf_r+0x1a2>
 8003bc6:	b1b0      	cbz	r0, 8003bf6 <_vfiprintf_r+0x13a>
 8003bc8:	9207      	str	r2, [sp, #28]
 8003bca:	e014      	b.n	8003bf6 <_vfiprintf_r+0x13a>
 8003bcc:	eba0 0308 	sub.w	r3, r0, r8
 8003bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	9304      	str	r3, [sp, #16]
 8003bd8:	46a2      	mov	sl, r4
 8003bda:	e7d2      	b.n	8003b82 <_vfiprintf_r+0xc6>
 8003bdc:	9b03      	ldr	r3, [sp, #12]
 8003bde:	1d19      	adds	r1, r3, #4
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	9103      	str	r1, [sp, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bfbb      	ittet	lt
 8003be8:	425b      	neglt	r3, r3
 8003bea:	f042 0202 	orrlt.w	r2, r2, #2
 8003bee:	9307      	strge	r3, [sp, #28]
 8003bf0:	9307      	strlt	r3, [sp, #28]
 8003bf2:	bfb8      	it	lt
 8003bf4:	9204      	strlt	r2, [sp, #16]
 8003bf6:	7823      	ldrb	r3, [r4, #0]
 8003bf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bfa:	d10a      	bne.n	8003c12 <_vfiprintf_r+0x156>
 8003bfc:	7863      	ldrb	r3, [r4, #1]
 8003bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c00:	d132      	bne.n	8003c68 <_vfiprintf_r+0x1ac>
 8003c02:	9b03      	ldr	r3, [sp, #12]
 8003c04:	1d1a      	adds	r2, r3, #4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	9203      	str	r2, [sp, #12]
 8003c0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c0e:	3402      	adds	r4, #2
 8003c10:	9305      	str	r3, [sp, #20]
 8003c12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003ce8 <_vfiprintf_r+0x22c>
 8003c16:	7821      	ldrb	r1, [r4, #0]
 8003c18:	2203      	movs	r2, #3
 8003c1a:	4650      	mov	r0, sl
 8003c1c:	f7fc faf8 	bl	8000210 <memchr>
 8003c20:	b138      	cbz	r0, 8003c32 <_vfiprintf_r+0x176>
 8003c22:	9b04      	ldr	r3, [sp, #16]
 8003c24:	eba0 000a 	sub.w	r0, r0, sl
 8003c28:	2240      	movs	r2, #64	@ 0x40
 8003c2a:	4082      	lsls	r2, r0
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	3401      	adds	r4, #1
 8003c30:	9304      	str	r3, [sp, #16]
 8003c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c36:	4829      	ldr	r0, [pc, #164]	@ (8003cdc <_vfiprintf_r+0x220>)
 8003c38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c3c:	2206      	movs	r2, #6
 8003c3e:	f7fc fae7 	bl	8000210 <memchr>
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d03f      	beq.n	8003cc6 <_vfiprintf_r+0x20a>
 8003c46:	4b26      	ldr	r3, [pc, #152]	@ (8003ce0 <_vfiprintf_r+0x224>)
 8003c48:	bb1b      	cbnz	r3, 8003c92 <_vfiprintf_r+0x1d6>
 8003c4a:	9b03      	ldr	r3, [sp, #12]
 8003c4c:	3307      	adds	r3, #7
 8003c4e:	f023 0307 	bic.w	r3, r3, #7
 8003c52:	3308      	adds	r3, #8
 8003c54:	9303      	str	r3, [sp, #12]
 8003c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c58:	443b      	add	r3, r7
 8003c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c5c:	e76a      	b.n	8003b34 <_vfiprintf_r+0x78>
 8003c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c62:	460c      	mov	r4, r1
 8003c64:	2001      	movs	r0, #1
 8003c66:	e7a8      	b.n	8003bba <_vfiprintf_r+0xfe>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	3401      	adds	r4, #1
 8003c6c:	9305      	str	r3, [sp, #20]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f04f 0c0a 	mov.w	ip, #10
 8003c74:	4620      	mov	r0, r4
 8003c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c7a:	3a30      	subs	r2, #48	@ 0x30
 8003c7c:	2a09      	cmp	r2, #9
 8003c7e:	d903      	bls.n	8003c88 <_vfiprintf_r+0x1cc>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0c6      	beq.n	8003c12 <_vfiprintf_r+0x156>
 8003c84:	9105      	str	r1, [sp, #20]
 8003c86:	e7c4      	b.n	8003c12 <_vfiprintf_r+0x156>
 8003c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e7f0      	b.n	8003c74 <_vfiprintf_r+0x1b8>
 8003c92:	ab03      	add	r3, sp, #12
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	462a      	mov	r2, r5
 8003c98:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <_vfiprintf_r+0x228>)
 8003c9a:	a904      	add	r1, sp, #16
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	f3af 8000 	nop.w
 8003ca2:	4607      	mov	r7, r0
 8003ca4:	1c78      	adds	r0, r7, #1
 8003ca6:	d1d6      	bne.n	8003c56 <_vfiprintf_r+0x19a>
 8003ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003caa:	07d9      	lsls	r1, r3, #31
 8003cac:	d405      	bmi.n	8003cba <_vfiprintf_r+0x1fe>
 8003cae:	89ab      	ldrh	r3, [r5, #12]
 8003cb0:	059a      	lsls	r2, r3, #22
 8003cb2:	d402      	bmi.n	8003cba <_vfiprintf_r+0x1fe>
 8003cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cb6:	f7ff fddd 	bl	8003874 <__retarget_lock_release_recursive>
 8003cba:	89ab      	ldrh	r3, [r5, #12]
 8003cbc:	065b      	lsls	r3, r3, #25
 8003cbe:	f53f af1f 	bmi.w	8003b00 <_vfiprintf_r+0x44>
 8003cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003cc4:	e71e      	b.n	8003b04 <_vfiprintf_r+0x48>
 8003cc6:	ab03      	add	r3, sp, #12
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	462a      	mov	r2, r5
 8003ccc:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <_vfiprintf_r+0x228>)
 8003cce:	a904      	add	r1, sp, #16
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f000 f879 	bl	8003dc8 <_printf_i>
 8003cd6:	e7e4      	b.n	8003ca2 <_vfiprintf_r+0x1e6>
 8003cd8:	080042e0 	.word	0x080042e0
 8003cdc:	080042ea 	.word	0x080042ea
 8003ce0:	00000000 	.word	0x00000000
 8003ce4:	08003a97 	.word	0x08003a97
 8003ce8:	080042e6 	.word	0x080042e6

08003cec <_printf_common>:
 8003cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf0:	4616      	mov	r6, r2
 8003cf2:	4698      	mov	r8, r3
 8003cf4:	688a      	ldr	r2, [r1, #8]
 8003cf6:	690b      	ldr	r3, [r1, #16]
 8003cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	bfb8      	it	lt
 8003d00:	4613      	movlt	r3, r2
 8003d02:	6033      	str	r3, [r6, #0]
 8003d04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d08:	4607      	mov	r7, r0
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	b10a      	cbz	r2, 8003d12 <_printf_common+0x26>
 8003d0e:	3301      	adds	r3, #1
 8003d10:	6033      	str	r3, [r6, #0]
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	0699      	lsls	r1, r3, #26
 8003d16:	bf42      	ittt	mi
 8003d18:	6833      	ldrmi	r3, [r6, #0]
 8003d1a:	3302      	addmi	r3, #2
 8003d1c:	6033      	strmi	r3, [r6, #0]
 8003d1e:	6825      	ldr	r5, [r4, #0]
 8003d20:	f015 0506 	ands.w	r5, r5, #6
 8003d24:	d106      	bne.n	8003d34 <_printf_common+0x48>
 8003d26:	f104 0a19 	add.w	sl, r4, #25
 8003d2a:	68e3      	ldr	r3, [r4, #12]
 8003d2c:	6832      	ldr	r2, [r6, #0]
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	42ab      	cmp	r3, r5
 8003d32:	dc26      	bgt.n	8003d82 <_printf_common+0x96>
 8003d34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d38:	6822      	ldr	r2, [r4, #0]
 8003d3a:	3b00      	subs	r3, #0
 8003d3c:	bf18      	it	ne
 8003d3e:	2301      	movne	r3, #1
 8003d40:	0692      	lsls	r2, r2, #26
 8003d42:	d42b      	bmi.n	8003d9c <_printf_common+0xb0>
 8003d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d48:	4641      	mov	r1, r8
 8003d4a:	4638      	mov	r0, r7
 8003d4c:	47c8      	blx	r9
 8003d4e:	3001      	adds	r0, #1
 8003d50:	d01e      	beq.n	8003d90 <_printf_common+0xa4>
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	6922      	ldr	r2, [r4, #16]
 8003d56:	f003 0306 	and.w	r3, r3, #6
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	bf02      	ittt	eq
 8003d5e:	68e5      	ldreq	r5, [r4, #12]
 8003d60:	6833      	ldreq	r3, [r6, #0]
 8003d62:	1aed      	subeq	r5, r5, r3
 8003d64:	68a3      	ldr	r3, [r4, #8]
 8003d66:	bf0c      	ite	eq
 8003d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d6c:	2500      	movne	r5, #0
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	bfc4      	itt	gt
 8003d72:	1a9b      	subgt	r3, r3, r2
 8003d74:	18ed      	addgt	r5, r5, r3
 8003d76:	2600      	movs	r6, #0
 8003d78:	341a      	adds	r4, #26
 8003d7a:	42b5      	cmp	r5, r6
 8003d7c:	d11a      	bne.n	8003db4 <_printf_common+0xc8>
 8003d7e:	2000      	movs	r0, #0
 8003d80:	e008      	b.n	8003d94 <_printf_common+0xa8>
 8003d82:	2301      	movs	r3, #1
 8003d84:	4652      	mov	r2, sl
 8003d86:	4641      	mov	r1, r8
 8003d88:	4638      	mov	r0, r7
 8003d8a:	47c8      	blx	r9
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d103      	bne.n	8003d98 <_printf_common+0xac>
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d98:	3501      	adds	r5, #1
 8003d9a:	e7c6      	b.n	8003d2a <_printf_common+0x3e>
 8003d9c:	18e1      	adds	r1, r4, r3
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	2030      	movs	r0, #48	@ 0x30
 8003da2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003da6:	4422      	add	r2, r4
 8003da8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003db0:	3302      	adds	r3, #2
 8003db2:	e7c7      	b.n	8003d44 <_printf_common+0x58>
 8003db4:	2301      	movs	r3, #1
 8003db6:	4622      	mov	r2, r4
 8003db8:	4641      	mov	r1, r8
 8003dba:	4638      	mov	r0, r7
 8003dbc:	47c8      	blx	r9
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d0e6      	beq.n	8003d90 <_printf_common+0xa4>
 8003dc2:	3601      	adds	r6, #1
 8003dc4:	e7d9      	b.n	8003d7a <_printf_common+0x8e>
	...

08003dc8 <_printf_i>:
 8003dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	7e0f      	ldrb	r7, [r1, #24]
 8003dce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dd0:	2f78      	cmp	r7, #120	@ 0x78
 8003dd2:	4691      	mov	r9, r2
 8003dd4:	4680      	mov	r8, r0
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	469a      	mov	sl, r3
 8003dda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dde:	d807      	bhi.n	8003df0 <_printf_i+0x28>
 8003de0:	2f62      	cmp	r7, #98	@ 0x62
 8003de2:	d80a      	bhi.n	8003dfa <_printf_i+0x32>
 8003de4:	2f00      	cmp	r7, #0
 8003de6:	f000 80d2 	beq.w	8003f8e <_printf_i+0x1c6>
 8003dea:	2f58      	cmp	r7, #88	@ 0x58
 8003dec:	f000 80b9 	beq.w	8003f62 <_printf_i+0x19a>
 8003df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003df4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003df8:	e03a      	b.n	8003e70 <_printf_i+0xa8>
 8003dfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dfe:	2b15      	cmp	r3, #21
 8003e00:	d8f6      	bhi.n	8003df0 <_printf_i+0x28>
 8003e02:	a101      	add	r1, pc, #4	@ (adr r1, 8003e08 <_printf_i+0x40>)
 8003e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e08:	08003e61 	.word	0x08003e61
 8003e0c:	08003e75 	.word	0x08003e75
 8003e10:	08003df1 	.word	0x08003df1
 8003e14:	08003df1 	.word	0x08003df1
 8003e18:	08003df1 	.word	0x08003df1
 8003e1c:	08003df1 	.word	0x08003df1
 8003e20:	08003e75 	.word	0x08003e75
 8003e24:	08003df1 	.word	0x08003df1
 8003e28:	08003df1 	.word	0x08003df1
 8003e2c:	08003df1 	.word	0x08003df1
 8003e30:	08003df1 	.word	0x08003df1
 8003e34:	08003f75 	.word	0x08003f75
 8003e38:	08003e9f 	.word	0x08003e9f
 8003e3c:	08003f2f 	.word	0x08003f2f
 8003e40:	08003df1 	.word	0x08003df1
 8003e44:	08003df1 	.word	0x08003df1
 8003e48:	08003f97 	.word	0x08003f97
 8003e4c:	08003df1 	.word	0x08003df1
 8003e50:	08003e9f 	.word	0x08003e9f
 8003e54:	08003df1 	.word	0x08003df1
 8003e58:	08003df1 	.word	0x08003df1
 8003e5c:	08003f37 	.word	0x08003f37
 8003e60:	6833      	ldr	r3, [r6, #0]
 8003e62:	1d1a      	adds	r2, r3, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6032      	str	r2, [r6, #0]
 8003e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e70:	2301      	movs	r3, #1
 8003e72:	e09d      	b.n	8003fb0 <_printf_i+0x1e8>
 8003e74:	6833      	ldr	r3, [r6, #0]
 8003e76:	6820      	ldr	r0, [r4, #0]
 8003e78:	1d19      	adds	r1, r3, #4
 8003e7a:	6031      	str	r1, [r6, #0]
 8003e7c:	0606      	lsls	r6, r0, #24
 8003e7e:	d501      	bpl.n	8003e84 <_printf_i+0xbc>
 8003e80:	681d      	ldr	r5, [r3, #0]
 8003e82:	e003      	b.n	8003e8c <_printf_i+0xc4>
 8003e84:	0645      	lsls	r5, r0, #25
 8003e86:	d5fb      	bpl.n	8003e80 <_printf_i+0xb8>
 8003e88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e8c:	2d00      	cmp	r5, #0
 8003e8e:	da03      	bge.n	8003e98 <_printf_i+0xd0>
 8003e90:	232d      	movs	r3, #45	@ 0x2d
 8003e92:	426d      	negs	r5, r5
 8003e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e98:	4859      	ldr	r0, [pc, #356]	@ (8004000 <_printf_i+0x238>)
 8003e9a:	230a      	movs	r3, #10
 8003e9c:	e011      	b.n	8003ec2 <_printf_i+0xfa>
 8003e9e:	6821      	ldr	r1, [r4, #0]
 8003ea0:	6833      	ldr	r3, [r6, #0]
 8003ea2:	0608      	lsls	r0, r1, #24
 8003ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ea8:	d402      	bmi.n	8003eb0 <_printf_i+0xe8>
 8003eaa:	0649      	lsls	r1, r1, #25
 8003eac:	bf48      	it	mi
 8003eae:	b2ad      	uxthmi	r5, r5
 8003eb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003eb2:	4853      	ldr	r0, [pc, #332]	@ (8004000 <_printf_i+0x238>)
 8003eb4:	6033      	str	r3, [r6, #0]
 8003eb6:	bf14      	ite	ne
 8003eb8:	230a      	movne	r3, #10
 8003eba:	2308      	moveq	r3, #8
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ec2:	6866      	ldr	r6, [r4, #4]
 8003ec4:	60a6      	str	r6, [r4, #8]
 8003ec6:	2e00      	cmp	r6, #0
 8003ec8:	bfa2      	ittt	ge
 8003eca:	6821      	ldrge	r1, [r4, #0]
 8003ecc:	f021 0104 	bicge.w	r1, r1, #4
 8003ed0:	6021      	strge	r1, [r4, #0]
 8003ed2:	b90d      	cbnz	r5, 8003ed8 <_printf_i+0x110>
 8003ed4:	2e00      	cmp	r6, #0
 8003ed6:	d04b      	beq.n	8003f70 <_printf_i+0x1a8>
 8003ed8:	4616      	mov	r6, r2
 8003eda:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ede:	fb03 5711 	mls	r7, r3, r1, r5
 8003ee2:	5dc7      	ldrb	r7, [r0, r7]
 8003ee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ee8:	462f      	mov	r7, r5
 8003eea:	42bb      	cmp	r3, r7
 8003eec:	460d      	mov	r5, r1
 8003eee:	d9f4      	bls.n	8003eda <_printf_i+0x112>
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d10b      	bne.n	8003f0c <_printf_i+0x144>
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	07df      	lsls	r7, r3, #31
 8003ef8:	d508      	bpl.n	8003f0c <_printf_i+0x144>
 8003efa:	6923      	ldr	r3, [r4, #16]
 8003efc:	6861      	ldr	r1, [r4, #4]
 8003efe:	4299      	cmp	r1, r3
 8003f00:	bfde      	ittt	le
 8003f02:	2330      	movle	r3, #48	@ 0x30
 8003f04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f0c:	1b92      	subs	r2, r2, r6
 8003f0e:	6122      	str	r2, [r4, #16]
 8003f10:	f8cd a000 	str.w	sl, [sp]
 8003f14:	464b      	mov	r3, r9
 8003f16:	aa03      	add	r2, sp, #12
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	f7ff fee6 	bl	8003cec <_printf_common>
 8003f20:	3001      	adds	r0, #1
 8003f22:	d14a      	bne.n	8003fba <_printf_i+0x1f2>
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	b004      	add	sp, #16
 8003f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	f043 0320 	orr.w	r3, r3, #32
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	4833      	ldr	r0, [pc, #204]	@ (8004004 <_printf_i+0x23c>)
 8003f38:	2778      	movs	r7, #120	@ 0x78
 8003f3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	6831      	ldr	r1, [r6, #0]
 8003f42:	061f      	lsls	r7, r3, #24
 8003f44:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f48:	d402      	bmi.n	8003f50 <_printf_i+0x188>
 8003f4a:	065f      	lsls	r7, r3, #25
 8003f4c:	bf48      	it	mi
 8003f4e:	b2ad      	uxthmi	r5, r5
 8003f50:	6031      	str	r1, [r6, #0]
 8003f52:	07d9      	lsls	r1, r3, #31
 8003f54:	bf44      	itt	mi
 8003f56:	f043 0320 	orrmi.w	r3, r3, #32
 8003f5a:	6023      	strmi	r3, [r4, #0]
 8003f5c:	b11d      	cbz	r5, 8003f66 <_printf_i+0x19e>
 8003f5e:	2310      	movs	r3, #16
 8003f60:	e7ac      	b.n	8003ebc <_printf_i+0xf4>
 8003f62:	4827      	ldr	r0, [pc, #156]	@ (8004000 <_printf_i+0x238>)
 8003f64:	e7e9      	b.n	8003f3a <_printf_i+0x172>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	f023 0320 	bic.w	r3, r3, #32
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	e7f6      	b.n	8003f5e <_printf_i+0x196>
 8003f70:	4616      	mov	r6, r2
 8003f72:	e7bd      	b.n	8003ef0 <_printf_i+0x128>
 8003f74:	6833      	ldr	r3, [r6, #0]
 8003f76:	6825      	ldr	r5, [r4, #0]
 8003f78:	6961      	ldr	r1, [r4, #20]
 8003f7a:	1d18      	adds	r0, r3, #4
 8003f7c:	6030      	str	r0, [r6, #0]
 8003f7e:	062e      	lsls	r6, r5, #24
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	d501      	bpl.n	8003f88 <_printf_i+0x1c0>
 8003f84:	6019      	str	r1, [r3, #0]
 8003f86:	e002      	b.n	8003f8e <_printf_i+0x1c6>
 8003f88:	0668      	lsls	r0, r5, #25
 8003f8a:	d5fb      	bpl.n	8003f84 <_printf_i+0x1bc>
 8003f8c:	8019      	strh	r1, [r3, #0]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	6123      	str	r3, [r4, #16]
 8003f92:	4616      	mov	r6, r2
 8003f94:	e7bc      	b.n	8003f10 <_printf_i+0x148>
 8003f96:	6833      	ldr	r3, [r6, #0]
 8003f98:	1d1a      	adds	r2, r3, #4
 8003f9a:	6032      	str	r2, [r6, #0]
 8003f9c:	681e      	ldr	r6, [r3, #0]
 8003f9e:	6862      	ldr	r2, [r4, #4]
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f7fc f934 	bl	8000210 <memchr>
 8003fa8:	b108      	cbz	r0, 8003fae <_printf_i+0x1e6>
 8003faa:	1b80      	subs	r0, r0, r6
 8003fac:	6060      	str	r0, [r4, #4]
 8003fae:	6863      	ldr	r3, [r4, #4]
 8003fb0:	6123      	str	r3, [r4, #16]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fb8:	e7aa      	b.n	8003f10 <_printf_i+0x148>
 8003fba:	6923      	ldr	r3, [r4, #16]
 8003fbc:	4632      	mov	r2, r6
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	4640      	mov	r0, r8
 8003fc2:	47d0      	blx	sl
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	d0ad      	beq.n	8003f24 <_printf_i+0x15c>
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	079b      	lsls	r3, r3, #30
 8003fcc:	d413      	bmi.n	8003ff6 <_printf_i+0x22e>
 8003fce:	68e0      	ldr	r0, [r4, #12]
 8003fd0:	9b03      	ldr	r3, [sp, #12]
 8003fd2:	4298      	cmp	r0, r3
 8003fd4:	bfb8      	it	lt
 8003fd6:	4618      	movlt	r0, r3
 8003fd8:	e7a6      	b.n	8003f28 <_printf_i+0x160>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	4632      	mov	r2, r6
 8003fde:	4649      	mov	r1, r9
 8003fe0:	4640      	mov	r0, r8
 8003fe2:	47d0      	blx	sl
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	d09d      	beq.n	8003f24 <_printf_i+0x15c>
 8003fe8:	3501      	adds	r5, #1
 8003fea:	68e3      	ldr	r3, [r4, #12]
 8003fec:	9903      	ldr	r1, [sp, #12]
 8003fee:	1a5b      	subs	r3, r3, r1
 8003ff0:	42ab      	cmp	r3, r5
 8003ff2:	dcf2      	bgt.n	8003fda <_printf_i+0x212>
 8003ff4:	e7eb      	b.n	8003fce <_printf_i+0x206>
 8003ff6:	2500      	movs	r5, #0
 8003ff8:	f104 0619 	add.w	r6, r4, #25
 8003ffc:	e7f5      	b.n	8003fea <_printf_i+0x222>
 8003ffe:	bf00      	nop
 8004000:	080042f1 	.word	0x080042f1
 8004004:	08004302 	.word	0x08004302

08004008 <__sflush_r>:
 8004008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800400c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004010:	0716      	lsls	r6, r2, #28
 8004012:	4605      	mov	r5, r0
 8004014:	460c      	mov	r4, r1
 8004016:	d454      	bmi.n	80040c2 <__sflush_r+0xba>
 8004018:	684b      	ldr	r3, [r1, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	dc02      	bgt.n	8004024 <__sflush_r+0x1c>
 800401e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	dd48      	ble.n	80040b6 <__sflush_r+0xae>
 8004024:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004026:	2e00      	cmp	r6, #0
 8004028:	d045      	beq.n	80040b6 <__sflush_r+0xae>
 800402a:	2300      	movs	r3, #0
 800402c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004030:	682f      	ldr	r7, [r5, #0]
 8004032:	6a21      	ldr	r1, [r4, #32]
 8004034:	602b      	str	r3, [r5, #0]
 8004036:	d030      	beq.n	800409a <__sflush_r+0x92>
 8004038:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	0759      	lsls	r1, r3, #29
 800403e:	d505      	bpl.n	800404c <__sflush_r+0x44>
 8004040:	6863      	ldr	r3, [r4, #4]
 8004042:	1ad2      	subs	r2, r2, r3
 8004044:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004046:	b10b      	cbz	r3, 800404c <__sflush_r+0x44>
 8004048:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800404a:	1ad2      	subs	r2, r2, r3
 800404c:	2300      	movs	r3, #0
 800404e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004050:	6a21      	ldr	r1, [r4, #32]
 8004052:	4628      	mov	r0, r5
 8004054:	47b0      	blx	r6
 8004056:	1c43      	adds	r3, r0, #1
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	d106      	bne.n	800406a <__sflush_r+0x62>
 800405c:	6829      	ldr	r1, [r5, #0]
 800405e:	291d      	cmp	r1, #29
 8004060:	d82b      	bhi.n	80040ba <__sflush_r+0xb2>
 8004062:	4a2a      	ldr	r2, [pc, #168]	@ (800410c <__sflush_r+0x104>)
 8004064:	410a      	asrs	r2, r1
 8004066:	07d6      	lsls	r6, r2, #31
 8004068:	d427      	bmi.n	80040ba <__sflush_r+0xb2>
 800406a:	2200      	movs	r2, #0
 800406c:	6062      	str	r2, [r4, #4]
 800406e:	04d9      	lsls	r1, r3, #19
 8004070:	6922      	ldr	r2, [r4, #16]
 8004072:	6022      	str	r2, [r4, #0]
 8004074:	d504      	bpl.n	8004080 <__sflush_r+0x78>
 8004076:	1c42      	adds	r2, r0, #1
 8004078:	d101      	bne.n	800407e <__sflush_r+0x76>
 800407a:	682b      	ldr	r3, [r5, #0]
 800407c:	b903      	cbnz	r3, 8004080 <__sflush_r+0x78>
 800407e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004082:	602f      	str	r7, [r5, #0]
 8004084:	b1b9      	cbz	r1, 80040b6 <__sflush_r+0xae>
 8004086:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800408a:	4299      	cmp	r1, r3
 800408c:	d002      	beq.n	8004094 <__sflush_r+0x8c>
 800408e:	4628      	mov	r0, r5
 8004090:	f7ff fbf2 	bl	8003878 <_free_r>
 8004094:	2300      	movs	r3, #0
 8004096:	6363      	str	r3, [r4, #52]	@ 0x34
 8004098:	e00d      	b.n	80040b6 <__sflush_r+0xae>
 800409a:	2301      	movs	r3, #1
 800409c:	4628      	mov	r0, r5
 800409e:	47b0      	blx	r6
 80040a0:	4602      	mov	r2, r0
 80040a2:	1c50      	adds	r0, r2, #1
 80040a4:	d1c9      	bne.n	800403a <__sflush_r+0x32>
 80040a6:	682b      	ldr	r3, [r5, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0c6      	beq.n	800403a <__sflush_r+0x32>
 80040ac:	2b1d      	cmp	r3, #29
 80040ae:	d001      	beq.n	80040b4 <__sflush_r+0xac>
 80040b0:	2b16      	cmp	r3, #22
 80040b2:	d11e      	bne.n	80040f2 <__sflush_r+0xea>
 80040b4:	602f      	str	r7, [r5, #0]
 80040b6:	2000      	movs	r0, #0
 80040b8:	e022      	b.n	8004100 <__sflush_r+0xf8>
 80040ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040be:	b21b      	sxth	r3, r3
 80040c0:	e01b      	b.n	80040fa <__sflush_r+0xf2>
 80040c2:	690f      	ldr	r7, [r1, #16]
 80040c4:	2f00      	cmp	r7, #0
 80040c6:	d0f6      	beq.n	80040b6 <__sflush_r+0xae>
 80040c8:	0793      	lsls	r3, r2, #30
 80040ca:	680e      	ldr	r6, [r1, #0]
 80040cc:	bf08      	it	eq
 80040ce:	694b      	ldreq	r3, [r1, #20]
 80040d0:	600f      	str	r7, [r1, #0]
 80040d2:	bf18      	it	ne
 80040d4:	2300      	movne	r3, #0
 80040d6:	eba6 0807 	sub.w	r8, r6, r7
 80040da:	608b      	str	r3, [r1, #8]
 80040dc:	f1b8 0f00 	cmp.w	r8, #0
 80040e0:	dde9      	ble.n	80040b6 <__sflush_r+0xae>
 80040e2:	6a21      	ldr	r1, [r4, #32]
 80040e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80040e6:	4643      	mov	r3, r8
 80040e8:	463a      	mov	r2, r7
 80040ea:	4628      	mov	r0, r5
 80040ec:	47b0      	blx	r6
 80040ee:	2800      	cmp	r0, #0
 80040f0:	dc08      	bgt.n	8004104 <__sflush_r+0xfc>
 80040f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040fa:	81a3      	strh	r3, [r4, #12]
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004104:	4407      	add	r7, r0
 8004106:	eba8 0800 	sub.w	r8, r8, r0
 800410a:	e7e7      	b.n	80040dc <__sflush_r+0xd4>
 800410c:	dfbffffe 	.word	0xdfbffffe

08004110 <_fflush_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	690b      	ldr	r3, [r1, #16]
 8004114:	4605      	mov	r5, r0
 8004116:	460c      	mov	r4, r1
 8004118:	b913      	cbnz	r3, 8004120 <_fflush_r+0x10>
 800411a:	2500      	movs	r5, #0
 800411c:	4628      	mov	r0, r5
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	b118      	cbz	r0, 800412a <_fflush_r+0x1a>
 8004122:	6a03      	ldr	r3, [r0, #32]
 8004124:	b90b      	cbnz	r3, 800412a <_fflush_r+0x1a>
 8004126:	f7ff f9ad 	bl	8003484 <__sinit>
 800412a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f3      	beq.n	800411a <_fflush_r+0xa>
 8004132:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004134:	07d0      	lsls	r0, r2, #31
 8004136:	d404      	bmi.n	8004142 <_fflush_r+0x32>
 8004138:	0599      	lsls	r1, r3, #22
 800413a:	d402      	bmi.n	8004142 <_fflush_r+0x32>
 800413c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800413e:	f7ff fb98 	bl	8003872 <__retarget_lock_acquire_recursive>
 8004142:	4628      	mov	r0, r5
 8004144:	4621      	mov	r1, r4
 8004146:	f7ff ff5f 	bl	8004008 <__sflush_r>
 800414a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800414c:	07da      	lsls	r2, r3, #31
 800414e:	4605      	mov	r5, r0
 8004150:	d4e4      	bmi.n	800411c <_fflush_r+0xc>
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	059b      	lsls	r3, r3, #22
 8004156:	d4e1      	bmi.n	800411c <_fflush_r+0xc>
 8004158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800415a:	f7ff fb8b 	bl	8003874 <__retarget_lock_release_recursive>
 800415e:	e7dd      	b.n	800411c <_fflush_r+0xc>

08004160 <__swhatbuf_r>:
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	460c      	mov	r4, r1
 8004164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004168:	2900      	cmp	r1, #0
 800416a:	b096      	sub	sp, #88	@ 0x58
 800416c:	4615      	mov	r5, r2
 800416e:	461e      	mov	r6, r3
 8004170:	da0d      	bge.n	800418e <__swhatbuf_r+0x2e>
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004178:	f04f 0100 	mov.w	r1, #0
 800417c:	bf14      	ite	ne
 800417e:	2340      	movne	r3, #64	@ 0x40
 8004180:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004184:	2000      	movs	r0, #0
 8004186:	6031      	str	r1, [r6, #0]
 8004188:	602b      	str	r3, [r5, #0]
 800418a:	b016      	add	sp, #88	@ 0x58
 800418c:	bd70      	pop	{r4, r5, r6, pc}
 800418e:	466a      	mov	r2, sp
 8004190:	f000 f848 	bl	8004224 <_fstat_r>
 8004194:	2800      	cmp	r0, #0
 8004196:	dbec      	blt.n	8004172 <__swhatbuf_r+0x12>
 8004198:	9901      	ldr	r1, [sp, #4]
 800419a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800419e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80041a2:	4259      	negs	r1, r3
 80041a4:	4159      	adcs	r1, r3
 80041a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041aa:	e7eb      	b.n	8004184 <__swhatbuf_r+0x24>

080041ac <__smakebuf_r>:
 80041ac:	898b      	ldrh	r3, [r1, #12]
 80041ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041b0:	079d      	lsls	r5, r3, #30
 80041b2:	4606      	mov	r6, r0
 80041b4:	460c      	mov	r4, r1
 80041b6:	d507      	bpl.n	80041c8 <__smakebuf_r+0x1c>
 80041b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	6123      	str	r3, [r4, #16]
 80041c0:	2301      	movs	r3, #1
 80041c2:	6163      	str	r3, [r4, #20]
 80041c4:	b003      	add	sp, #12
 80041c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c8:	ab01      	add	r3, sp, #4
 80041ca:	466a      	mov	r2, sp
 80041cc:	f7ff ffc8 	bl	8004160 <__swhatbuf_r>
 80041d0:	9f00      	ldr	r7, [sp, #0]
 80041d2:	4605      	mov	r5, r0
 80041d4:	4639      	mov	r1, r7
 80041d6:	4630      	mov	r0, r6
 80041d8:	f7ff fbba 	bl	8003950 <_malloc_r>
 80041dc:	b948      	cbnz	r0, 80041f2 <__smakebuf_r+0x46>
 80041de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e2:	059a      	lsls	r2, r3, #22
 80041e4:	d4ee      	bmi.n	80041c4 <__smakebuf_r+0x18>
 80041e6:	f023 0303 	bic.w	r3, r3, #3
 80041ea:	f043 0302 	orr.w	r3, r3, #2
 80041ee:	81a3      	strh	r3, [r4, #12]
 80041f0:	e7e2      	b.n	80041b8 <__smakebuf_r+0xc>
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	6020      	str	r0, [r4, #0]
 80041f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	9b01      	ldr	r3, [sp, #4]
 80041fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004202:	b15b      	cbz	r3, 800421c <__smakebuf_r+0x70>
 8004204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004208:	4630      	mov	r0, r6
 800420a:	f000 f81d 	bl	8004248 <_isatty_r>
 800420e:	b128      	cbz	r0, 800421c <__smakebuf_r+0x70>
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	81a3      	strh	r3, [r4, #12]
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	431d      	orrs	r5, r3
 8004220:	81a5      	strh	r5, [r4, #12]
 8004222:	e7cf      	b.n	80041c4 <__smakebuf_r+0x18>

08004224 <_fstat_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4d07      	ldr	r5, [pc, #28]	@ (8004244 <_fstat_r+0x20>)
 8004228:	2300      	movs	r3, #0
 800422a:	4604      	mov	r4, r0
 800422c:	4608      	mov	r0, r1
 800422e:	4611      	mov	r1, r2
 8004230:	602b      	str	r3, [r5, #0]
 8004232:	f7fc fd3d 	bl	8000cb0 <_fstat>
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	d102      	bne.n	8004240 <_fstat_r+0x1c>
 800423a:	682b      	ldr	r3, [r5, #0]
 800423c:	b103      	cbz	r3, 8004240 <_fstat_r+0x1c>
 800423e:	6023      	str	r3, [r4, #0]
 8004240:	bd38      	pop	{r3, r4, r5, pc}
 8004242:	bf00      	nop
 8004244:	200002bc 	.word	0x200002bc

08004248 <_isatty_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4d06      	ldr	r5, [pc, #24]	@ (8004264 <_isatty_r+0x1c>)
 800424c:	2300      	movs	r3, #0
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	f7fc fd3c 	bl	8000cd0 <_isatty>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_isatty_r+0x1a>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_isatty_r+0x1a>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	200002bc 	.word	0x200002bc

08004268 <_sbrk_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4d06      	ldr	r5, [pc, #24]	@ (8004284 <_sbrk_r+0x1c>)
 800426c:	2300      	movs	r3, #0
 800426e:	4604      	mov	r4, r0
 8004270:	4608      	mov	r0, r1
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	f7fc fd44 	bl	8000d00 <_sbrk>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d102      	bne.n	8004282 <_sbrk_r+0x1a>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	b103      	cbz	r3, 8004282 <_sbrk_r+0x1a>
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	200002bc 	.word	0x200002bc

08004288 <_init>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr

08004294 <_fini>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr
